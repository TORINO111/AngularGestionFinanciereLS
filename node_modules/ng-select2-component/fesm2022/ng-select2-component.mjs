import * as i0 from '@angular/core';
import { Directive, input, numberAttribute, booleanAttribute, computed, output, viewChild, viewChildren, signal, TemplateRef, Component, ChangeDetectionStrategy, Optional, Self, Attribute, HostBinding, HostListener } from '@angular/core';
import { moveItemInArray, CdkDropList, CdkDrag } from '@angular/cdk/drag-drop';
import { ConnectionPositionPair, CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';
import { NgTemplateOutlet } from '@angular/common';
import { toObservable } from '@angular/core/rxjs-interop';
import { InfiniteScrollDirective } from 'ngx-infinite-scroll';
import { Subject, Subscription } from 'rxjs';
import * as i1 from '@angular/cdk/scrolling';
import * as i2 from '@angular/forms';

const timeout = 200;
const unicodePatterns = [
    { l: 'a', s: /[ⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ]/gi },
    { l: 'aa', s: /ꜳ/gi },
    { l: 'ae', s: /[æǽǣ]/gi },
    { l: 'ao', s: /ꜵ/gi },
    { l: 'au', s: /ꜷ/gi },
    { l: 'av', s: /[ꜹꜻ]/gi },
    { l: 'ay', s: /ꜽ/gi },
    { l: 'b', s: /[ⓑｂḃḅḇƀƃɓ]/gi },
    { l: 'c', s: /[ⓒｃćĉċčçḉƈȼꜿↄ]/gi },
    { l: 'd', s: /[ⓓｄḋďḍḑḓḏđƌɖɗꝺ]/gi },
    { l: 'dz', s: /[ǳǆ]/gi },
    { l: 'e', s: /[ⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ]/gi },
    { l: 'f', s: /[ⓕｆḟƒꝼ]/gi },
    { l: 'g', s: /[ⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ]/gi },
    { l: 'h', s: /[ⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ]/gi },
    { l: 'hv', s: /ƕ/gi },
    { l: 'i', s: /[ⓘｉìíîĩīĭİïḯỉǐȉȋịįḭɨı]/gi },
    { l: 'j', s: /[ⓙｊĵǰɉ]/gi },
    { l: 'k', s: /[ⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ]/gi },
    { l: 'l', s: /[ⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇꝆ]/gi },
    { l: 'lj', s: /ǉ/gi },
    { l: 'm', s: /[ⓜｍḿṁṃɱɯ]/gi },
    { l: 'n', s: /[ⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ]/gi },
    { l: 'nj', s: /ǌ/gi },
    { l: 'o', s: /[ⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔƟꝋꝍɵ]/gi },
    { l: 'oi', s: /ƣ/gi },
    { l: 'oe', s: /œ/gi },
    { l: 'oo', s: /ꝏ/gi },
    { l: 'ou', s: /ȣ/gi },
    { l: 'p', s: /[ⓟｐṕṗƥᵽꝑꝓꝕ]/gi },
    { l: 'q', s: /[ⓠｑɋꝗꝙ]/gi },
    { l: 'r', s: /[ⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ]/gi },
    { l: 's', s: /[ⓢｓßẞśṥŝṡšṧṣṩșşȿꞩꞅẛ]/gi },
    { l: 't', s: /[ⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ]/gi },
    { l: 'tz', s: /ꜩ/gi },
    { l: 'u', s: /[ⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ]/gi },
    { l: 'v', s: /[ⓥｖṽṿʋꝟʌ]/gi },
    { l: 'vy', s: /ꝡ/gi },
    { l: 'w', s: /[ⓦｗẁẃŵẇẅẘẉⱳ]/gi },
    { l: 'x', s: /[ⓧｘẋẍ]/gi },
    { l: 'y', s: /[ⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ]/gi },
    { l: 'z', s: /[ⓩｚźẑżžẓẕƶȥɀⱬꝣ]/gi },
];
const defaultMinCountForSearch = 6;
const protectRegexp = new RegExp('[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]', 'g');

class Select2Hint {
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.4", ngImport: i0, type: Select2Hint, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.0.4", type: Select2Hint, isStandalone: true, selector: "select2-hint, ng-select2-hint", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.4", ngImport: i0, type: Select2Hint, decorators: [{
            type: Directive,
            args: [{ selector: 'select2-hint, ng-select2-hint', standalone: true }]
        }] });

class Select2Label {
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.4", ngImport: i0, type: Select2Label, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.0.4", type: Select2Label, isStandalone: true, selector: "select2-label, ng-select2-label", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.4", ngImport: i0, type: Select2Label, decorators: [{
            type: Directive,
            args: [{ selector: 'select2-label, ng-select2-label', standalone: true }]
        }] });

class Select2Utils {
    static getOptionByValue(data, value) {
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    for (const option of options) {
                        if (option.value === value) {
                            return option;
                        }
                    }
                }
                else if (groupOrOption.value === value) {
                    return groupOrOption;
                }
            }
        }
        return null;
    }
    static getOptionsByValue(data, value, multiple) {
        if (multiple) {
            const values = Array.isArray(value) ? value : [];
            const result = [];
            for (const v of values) {
                const option = Select2Utils.getOptionByValue(data, v);
                if (option) {
                    result.push(option);
                }
            }
            return result;
        }
        return Select2Utils.getOptionByValue(data, value);
    }
    static getFirstAvailableOption(data) {
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    for (const option of options) {
                        if (!option.disabled) {
                            return option;
                        }
                    }
                }
                else {
                    const option = groupOrOption;
                    if (!option.disabled) {
                        return option;
                    }
                }
            }
        }
        return null;
    }
    static optionIsNotInFilteredData(filteredData, option) {
        if (Select2Utils.isNullOrUndefined(option)) {
            return true;
        }
        for (const groupOrOption of filteredData) {
            const options = groupOrOption.options;
            if (options && options.includes(option)) {
                return false;
            }
            else if (groupOrOption === option) {
                return false;
            }
        }
        return true;
    }
    static getPreviousOption(filteredData, hoveringOption) {
        let findIt = Select2Utils.isNullOrUndefined(hoveringOption);
        for (let i = filteredData.length - 1; i >= 0; i--) {
            const groupOrOption = filteredData[i];
            const options = groupOrOption.options;
            if (options) {
                for (let j = options.length - 1; j >= 0; j--) {
                    const option = options[j];
                    if (findIt && !option.disabled && !option.hide) {
                        return option;
                    }
                    if (!findIt) {
                        findIt = option === hoveringOption;
                    }
                }
            }
            else {
                const option = groupOrOption;
                if (findIt && !option.disabled && !option.hide) {
                    return option;
                }
                if (!findIt) {
                    findIt = option === hoveringOption;
                }
            }
        }
        return null;
    }
    static getNextOption(filteredData, hoveringOption) {
        let findIt = Select2Utils.isNullOrUndefined(hoveringOption);
        if (filteredData) {
            for (const groupOrOption of filteredData) {
                const options = groupOrOption.options;
                if (options) {
                    for (const option of options) {
                        if (findIt) {
                            if (!option.disabled && !option.hide) {
                                return option;
                            }
                        }
                        else if (!findIt) {
                            findIt = option === hoveringOption;
                        }
                    }
                }
                else {
                    const option = groupOrOption;
                    if (findIt) {
                        if (!option.disabled && !option.hide) {
                            return option;
                        }
                    }
                    else if (!findIt) {
                        findIt = option === hoveringOption;
                    }
                }
            }
        }
        return null;
    }
    static getFirstOption(filteredData) {
        const firstElement = filteredData[0];
        if (this.isOption(firstElement)) {
            return firstElement ?? null;
        }
        else {
            return firstElement.options[0] ?? null;
        }
    }
    static getLastOption(filteredData) {
        const lastElement = filteredData.at(-1);
        if (!lastElement) {
            return null;
        }
        if (this.isOption(lastElement)) {
            return lastElement;
        }
        else {
            return lastElement.options.at(-1) ?? null;
        }
    }
    static isGroup(element) {
        return !!element.options;
    }
    static isOption(element) {
        return !this.isGroup(element);
    }
    static getReduceData(data, maxResults = 0) {
        if (maxResults > 0) {
            let counter = 0;
            const result = [];
            // debugger;
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    const group = {
                        ...groupOrOption,
                        options: [],
                    };
                    result.push(group);
                    for (const item of options) {
                        group.options.push(item);
                        counter++;
                        if (counter === maxResults) {
                            return { result, reduce: true };
                        }
                    }
                }
                else {
                    result.push(groupOrOption);
                    counter++;
                }
                if (counter === maxResults) {
                    return { result, reduce: true };
                }
            }
            return { result, reduce: false };
        }
        else {
            return { result: data, reduce: false };
        }
    }
    static getFilteredData(data, searchText, editPattern) {
        if (searchText) {
            const result = [];
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    if (options.some(group => Select2Utils.containSearchText(group.label, searchText, editPattern))) {
                        const filteredOptions = options.filter(group => Select2Utils.containSearchText(group.label, searchText, editPattern));
                        result.push({
                            ...groupOrOption,
                            options: filteredOptions,
                        });
                    }
                }
                else if (Select2Utils.containSearchText(groupOrOption.label, searchText, editPattern)) {
                    result.push(groupOrOption);
                }
            }
            return result;
        }
        else {
            return data;
        }
    }
    static getFilteredSelectedData(data, selectedOptions) {
        const result = [];
        for (const groupOrOption of data) {
            const options = groupOrOption.options;
            if (options) {
                const filteredOptions = options.filter(group => Select2Utils.isSelected(selectedOptions, group, true) === 'false');
                if (filteredOptions.length) {
                    result.push({
                        ...groupOrOption,
                        options: filteredOptions,
                    });
                }
            }
            else if (Select2Utils.isSelected(selectedOptions, groupOrOption, true) === 'false') {
                result.push(groupOrOption);
            }
        }
        return result;
    }
    static isSearchboxHidden(data, minCountForSearch) {
        if (minCountForSearch === undefined || minCountForSearch === null || isNaN(+minCountForSearch)) {
            minCountForSearch = defaultMinCountForSearch;
        }
        const optionCount = Select2Utils.getOptionsCount(data);
        return optionCount < +minCountForSearch;
    }
    static isSelected(options, option, multiple) {
        return multiple
            ? options && options.some(op => op.value === option.value)
                ? 'true'
                : 'false'
            : options && option.value === options.value
                ? 'true'
                : 'false';
    }
    static removeSelection(options, option) {
        for (let i = 0; i < options.length; i++) {
            if (options[i].value === option.value) {
                options.splice(i, 1);
                return;
            }
        }
    }
    static getOptionsCount(data) {
        let count = 0;
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                count += options ? options.length : 1;
            }
        }
        return count;
    }
    static isNullOrUndefined(value) {
        return value === null || value === undefined;
    }
    static containSearchText(label, searchText, editPattern) {
        return searchText
            ? Select2Utils.formatSansUnicode(label).match(new RegExp(Select2Utils.formatPattern(searchText, editPattern), 'i')) !== null
            : true;
    }
    static protectPattern(str) {
        return str.replace(protectRegexp, '\\$&');
    }
    static formatSansUnicode(str) {
        for (const unicodePattern of unicodePatterns) {
            str = str.replace(unicodePattern.s, unicodePattern.l);
        }
        return str;
    }
    static formatPattern(str, editPattern) {
        str = Select2Utils.formatSansUnicode(Select2Utils.protectPattern(str));
        if (editPattern && typeof editPattern === 'function') {
            str = editPattern(str);
        }
        return str;
    }
}

let nextUniqueId = 0;
const OPEN_KEYS_NATIVE = ['Enter', ' '];
const CLOSE_KEYS_NATIVE = ['ArrowDown', 'ArrowUp', 'Home', 'End', 'PageUp', 'PageDown'];
const OPEN_KEYS = ['ArrowDown', 'ArrowUp', 'Enter', ' ', 'Home', 'End', 'PageUp', 'PageDown'];
const ON_OPEN_KEYS = ['Home', 'End', 'PageUp', 'PageDown'];
const CLOSE_KEYS = ['Escape', 'Tab', { key: 'ArrowUp', altKey: true }];
class Select2 {
    // ----------------------- HostBinding
    get classMaterial() {
        return this.styleMode() === 'material';
    }
    get classNostyle() {
        return this.styleMode() === 'noStyle';
    }
    get classBorderless() {
        return this.styleMode() === 'borderless';
    }
    get select2above() {
        return !this.overlay() ? this.listPosition() === 'above' : this._isAbobeOverlay();
    }
    get select2Options() {
        return this.multiple() ? (this.selectedOption ?? []) : [];
    }
    get select2Option() {
        return this.multiple() ? null : this.selectedOption;
    }
    get searchText() {
        return this.innerSearchText;
    }
    set searchText(text) {
        this.innerSearchText = text;
    }
    get disabledState() {
        return this._control?.disabled ?? this._disabled;
    }
    get _positions() {
        switch (this.listPosition()) {
            case 'above':
                return [
                    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),
                ];
            case 'auto':
                return [
                    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
                    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),
                ];
            default:
                return [
                    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
                ];
        }
    }
    get resultsElement() {
        return this.resultContainer()?.nativeElement;
    }
    /** Tab index for the element. */
    get _tabIndex() {
        return this.disabledState ? -1 : this.tabIndex();
    }
    constructor(_viewportRuler, _changeDetectorRef, _parentForm, _parentFormGroup, _control, tabIndex) {
        this._viewportRuler = _viewportRuler;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._control = _control;
        this._uid = `select2-${nextUniqueId++}`;
        // ----------------------- signal-input
        /** data of options & option groups */
        this.data = input.required();
        /** minimum characters to start filter search */
        this.minCharForSearch = input(0, { transform: numberAttribute });
        /** text placeholder */
        this.displaySearchStatus = input(undefined);
        /** text placeholder */
        this.placeholder = input(undefined);
        /** in multiple: maximum selection element (0 = no limit) */
        this.limitSelection = input(0, { transform: numberAttribute });
        /** dropdown position */
        this.listPosition = input('below');
        /** overlay with CDK Angular position */
        this.overlay = input(false, { transform: booleanAttribute });
        /** select one or more item */
        this.multiple = input(false, { transform: booleanAttribute });
        /** drag'n drop list of items in multiple */
        this.multipleDrag = input(false, { transform: booleanAttribute });
        /** use the material style */
        this.styleMode = input('default');
        /** message when no result */
        this.noResultMessage = input();
        /** maximum results limit (0 = no limit) */
        this.maxResults = input(0, { transform: numberAttribute });
        /** message when maximum results */
        this.maxResultsMessage = input('Too many results…');
        /** infinite scroll distance */
        this.infiniteScrollDistance = input(1.5, { transform: numberAttribute });
        /** infinite scroll distance */
        this.infiniteScrollThrottle = input(150, { transform: numberAttribute });
        /** infinite scroll activated */
        this.infiniteScroll = input(false, { transform: booleanAttribute });
        /** auto create if not exist */
        this.autoCreate = input(false, { transform: booleanAttribute });
        /** no template for label selection */
        this.noLabelTemplate = input(false, { transform: booleanAttribute });
        /** use it for change the pattern of the filter search */
        this.editPattern = input(undefined);
        /** template(s) for formatting */
        this.templates = input(undefined);
        /** template for formatting selected option */
        this.templateSelection = input(undefined);
        /** the max height of the results container when opening the select */
        this.resultMaxHeight = input('200px');
        /** Active Search event */
        this.customSearchEnabled = input(false, { transform: booleanAttribute });
        /** minimal data of show the search field */
        this.minCountForSearch = input(undefined, { transform: numberAttribute });
        /** Unique id of the element. */
        this.id = input(this._uid);
        /** Unique id of label element. */
        this.idLabel = computed(() => `${this.id()}-label`);
        /** Unique id of combo element. */
        this.idCombo = computed(() => `${this.id()}-combo`);
        /** Unique id of options element. */
        this.idOptions = computed(() => `${this.id()}-options`);
        /** Unique id of overlay element. */
        this.idOverlay = computed(() => `${this.id()}-overlay`);
        /** Whether the element is required. */
        this.required = input(false, { transform: booleanAttribute });
        /** Whether selected items should be hidden. */
        this.disabled = input(false, { transform: booleanAttribute });
        /** Whether items are hidden when has. */
        this.hideSelectedItems = input(false, { transform: booleanAttribute });
        /** Whether the element is readonly. */
        this.readonly = input(false, { transform: booleanAttribute });
        /** The input element's value. */
        this.value = input();
        /** Tab index for the select2 element. */
        this.tabIndex = input(0, { transform: numberAttribute });
        /** reset with no selected value */
        this.resettable = input(false, { transform: booleanAttribute });
        /** selected value when × is clicked */
        this.resetSelectedValue = input(undefined);
        /** like native select keyboard navigation (only single mode) */
        this.nativeKeyboard = input(false, { transform: booleanAttribute });
        /** grid: item by line
         * * 0 = no grid
         * * number = item by line (4)
         * * string = minimal size item (100px)
         */
        this.grid = input('');
        /**
         * Replace selection by a text
         * * if string: `%size%` = total selected options
         * * if function: juste show the string
         */
        this.selectionOverride = input(undefined);
        /** force selection on one line */
        this.selectionNoWrap = input(false, { transform: booleanAttribute });
        /** Add an option to select or remove all (if all is selected) */
        this.showSelectAll = input(false, { transform: booleanAttribute });
        /** Text for remove all options */
        this.removeAllText = input('Remove all');
        /** Text for select all options */
        this.selectAllText = input('Select all');
        // -- WAI related inputs ---
        /** title attribute applied to the input */
        this.title = input();
        /** aria-labelledby attribute applied to the input, to specify en external label */
        this.ariaLabelledby = input();
        /** aria-describedby attribute applied to the input */
        this.ariaDescribedby = input();
        /** aria-invalid attribute applied to the input, to force error state */
        this.ariaInvalid = input(false, { transform: booleanAttribute });
        /** description of the reset button when using 'resettable'. Default value : 'Reset' */
        this.ariaResetButtonDescription = input('Reset');
        // ----------------------- output
        this.update = output();
        this.autoCreateItem = output();
        this.open = output();
        this.close = output();
        this.focus = output();
        this.blur = output();
        this.search = output();
        this.scroll = output();
        this.removeOption = output();
        // ----------------------- signal viewChild
        this.cdkConnectedOverlay = viewChild.required(CdkConnectedOverlay);
        this.selection = viewChild.required('selection');
        this.resultContainer = viewChild('results');
        this.results = viewChildren('result');
        this.searchInput = viewChild('searchInput');
        this.dropdown = viewChild('dropdown');
        // ----------------------- internal var
        this.selectedOption = null;
        this.isOpen = false;
        /** Whether the element is focused or not. */
        this.focused = false;
        this.filteredData = signal(undefined);
        this.overlayWidth = '';
        this.overlayHeight = '';
        this.hoveringOption = signal(null);
        this.hoveringOptionId = computed(() => this.getElementId(this.hoveringOption()));
        this.innerSearchText = '';
        this._stateChanges = new Subject();
        this._data = [];
        this._disabled = false;
        this._value = null;
        this.toObservable = new Subscription();
        /** View -> model callback called when select has been touched */
        this._onTouched = () => {
            // do nothing
        };
        /** View -> model callback called when value changes */
        this._onChange = () => {
            // do nothing
        };
        if (this._control) {
            this._control.valueAccessor = this;
        }
        this.toObservable.add(toObservable(this.multiple).subscribe(_multiple => {
            this.ngOnInit();
        }));
        this.toObservable.add(toObservable(this.minCountForSearch).subscribe(minCountForSearch => {
            this.updateSearchBox();
        }));
        this.toObservable.add(toObservable(this.disabled).subscribe(disabled => {
            this._disabled = disabled;
        }));
    }
    ngOnChanges(changes) {
        let updateFilterData;
        if (changes['data']) {
            this._data = changes['data'].currentValue;
            updateFilterData = true;
        }
        if (changes['value']) {
            const value = changes['value'].currentValue;
            if (this.testValueChange(this._value, value)) {
                if (this._value === undefined) {
                    this._value = value;
                }
                this.writeValue(value);
                updateFilterData = true;
            }
        }
        // now call update filter data so that _data and the current selected values are set
        if (updateFilterData) {
            this.updateFilteredData();
        }
    }
    clickDetection(e) {
        if (this.isOpen) {
            const target = e.target;
            if (!this.ifParentContainsClass(target, 'selection')) {
                if ((!this.ifParentContainsClass(target, 'select2-dropdown') &&
                    !this.multiple() &&
                    !this.hideSelectedItems()) ||
                    !(this.ifParentContainsClass(target, 'select2-results__option') ||
                        this.ifParentContainsClass(target, 'select2-dropdown'))) {
                    this.toggleOpenAndClose();
                }
                if (!this.overlay() && !this.ifParentContainsId(target, this.id())) {
                    this.clickExit();
                }
            }
            else if (!this.ifParentContainsId(target, this.id())) {
                this.toggleOpenAndClose();
                this.clickExit();
            }
        }
        else if (this.focused) {
            const target = e.target;
            this._focus(this.clickOnSelect2Element(target));
        }
    }
    ngOnInit() {
        this._viewportRuler.change(100).subscribe(() => {
            if (this.isOpen) {
                this.triggerRect();
            }
        });
        const option = Select2Utils.getOptionsByValue(this._data, this._control ? this._control.value : this.value(), this.multiple());
        if (option !== null) {
            this.selectedOption = option ?? null;
        }
        if (!Array.isArray(option)) {
            this.hoveringOption.set(Select2Utils.getOptionByValue(this._data, this.value));
        }
        this.updateSearchBox();
    }
    ngAfterViewInit() {
        this.cdkConnectedOverlay().positionChange.subscribe((posChange) => {
            if (this.listPosition() === 'auto' &&
                posChange.connectionPair?.originY &&
                this._overlayPosition !== posChange.connectionPair.originY) {
                this.triggerRect();
                this._overlayPosition = posChange.connectionPair.originY;
                this._changeDetectorRef.detectChanges();
            }
        });
        this.selectionElement = this.selection().nativeElement;
        this.triggerRect();
    }
    ngDoCheck() {
        this.updateSearchBox();
        this._dirtyCheckNativeValue();
        if (this._triggerRect) {
            if (this.overlayWidth !== this._triggerRect.width) {
                this.overlayWidth = this._triggerRect.width;
                this._changeDetectorRef.detectChanges();
            }
            if (this._dropdownRect &&
                this._dropdownRect.height > 0 &&
                this.overlayHeight !== this._dropdownRect.height) {
                this.overlayHeight = this.listPosition() === 'auto' ? this._dropdownRect.height : 0;
                this.fixValue();
            }
        }
    }
    ngOnDestroy() {
        this.toObservable.unsubscribe();
    }
    fixValue() {
        if (!Array.isArray(this.selectedOption) && this.multiple()) {
            const selectedOption = this.selectedOption;
            this.selectedOption = [];
            setTimeout(() => {
                this.select(selectedOption);
                this._changeDetectorRef.detectChanges();
            });
        }
        else if (Array.isArray(this.selectedOption) && !this.multiple()) {
            const selectedOption = this.selectedOption[0];
            this.selectedOption = null;
            setTimeout(() => {
                this.select(selectedOption);
                this._changeDetectorRef.detectChanges();
            });
        }
        else {
            this._changeDetectorRef.detectChanges();
        }
    }
    updateSearchBox() {
        if (this.autoCreate() && !this.multiple()) {
            this.isSearchboxHidden = false;
        }
        else {
            const hidden = this.displaySearchStatus() === 'hidden' ||
                (this.displaySearchStatus() !== 'always' &&
                    !this.customSearchEnabled() &&
                    Select2Utils.isSearchboxHidden(this._data, this.minCountForSearch()));
            if (this.isSearchboxHidden !== hidden) {
                this.isSearchboxHidden = hidden;
            }
        }
    }
    getOptionStyle(option) {
        return ('select2-results__option ' +
            (option.hide ? 'select2-results__option--hide ' : '') +
            (option === this.hoveringOption() ? 'select2-results__option--highlighted ' : '') +
            (option.classes || ''));
    }
    mouseenter(option) {
        if (!option.disabled) {
            this.hoveringOption.set(option);
        }
    }
    click(option) {
        if (this.testSelection(option)) {
            this.select(option);
        }
    }
    reset(event) {
        const resetSelectedValue = this.resetSelectedValue();
        this.select(resetSelectedValue !== undefined
            ? (Select2Utils.getOptionByValue(this._data, resetSelectedValue) ?? null)
            : null);
        if (event) {
            this.stopEvent(event);
        }
        this._focus(true);
    }
    prevChange(event) {
        event.stopPropagation();
    }
    stopEvent(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    toggleOpenAndClose(focus = true, open, event) {
        if (this.disabledState || this.readonly()) {
            return;
        }
        this._focus(focus);
        const onOpenAction = event && this._testKey(event, ON_OPEN_KEYS);
        const changeEmit = this.isOpen !== (open ?? !this.isOpen);
        this.isOpen = open ?? !this.isOpen;
        if (this.isOpen) {
            if (!this.isSearchboxHidden) {
                this.innerSearchText = '';
                this.updateFilteredData();
                this._focusSearchbox(focus);
            }
            if (this.isSearchboxHidden && !changeEmit && event) {
                this.keyDown(event);
            }
            else {
                if (this.selectedOption) {
                    const option = Array.isArray(this.selectedOption) ? this.selectedOption[0] : this.selectedOption;
                    this.updateScrollFromOption(option);
                }
                else if (this.resultsElement) {
                    this.resultsElement.scrollTop = 0;
                }
                if (onOpenAction) {
                    this.keyDown(event);
                }
                this._changeDetectorRef.detectChanges();
                this.triggerRect();
                this.cdkConnectedOverlay().overlayRef?.updatePosition();
            }
            if (changeEmit) {
                this.open.emit(this);
            }
        }
        else if (changeEmit) {
            this.close.emit(this);
        }
        this._changeDetectorRef.markForCheck();
    }
    hasTemplate(option, defaultValue, select = false) {
        const templates = this.templates();
        const templatesValue = this.templates();
        return ((select
            ? templates?.[option.templateSelectionId ?? ''] instanceof TemplateRef ||
                templates?.[`${defaultValue}Selection`] instanceof TemplateRef ||
                templates?.[`templateSelection`] instanceof TemplateRef ||
                this.templateSelection() instanceof TemplateRef
            : false) ||
            templatesValue?.[option.templateId ?? ''] instanceof TemplateRef ||
            templatesValue?.[defaultValue] instanceof TemplateRef ||
            templatesValue?.['template'] instanceof TemplateRef ||
            templatesValue instanceof TemplateRef ||
            false);
    }
    getTemplate(option, defaultValue, select = false) {
        const templates = this.templates();
        const templatesValue = this.templates();
        return this.hasTemplate(option, defaultValue, select)
            ? (select
                ? templates?.[option.templateSelectionId ?? ''] ||
                    templates?.[`${defaultValue}Selection`] ||
                    templates?.[`templateSelection`] ||
                    this.templateSelection()
                : undefined) ||
                templatesValue?.[option.templateId ?? ''] ||
                templatesValue?.[defaultValue] ||
                templatesValue?.['template'] ||
                templatesValue
            : undefined;
    }
    triggerRect() {
        this._triggerRect = this.selectionElement?.getBoundingClientRect();
        const dropdown = this.dropdown();
        this._dropdownRect = dropdown?.nativeElement ? dropdown.nativeElement.getBoundingClientRect() : undefined;
    }
    isNumber(o) {
        return !isNaN(o - 0) && o !== null && o !== '' && o !== false;
    }
    selectAll() {
        if (this.multiple()) {
            if (!this.selectAllTest()) {
                const options = [];
                this._data.forEach(e => {
                    if (Select2Utils.isGroup(e)) {
                        e.options.forEach(f => {
                            if (!f.disabled && !f.hide) {
                                options.push(f);
                            }
                        });
                    }
                    else if (!e.disabled && !e.hide) {
                        options.push(e);
                    }
                });
                this.selectedOption = options;
                this.writeValue(options.map(e => e.value));
            }
            else {
                this.selectedOption = [];
                this.writeValue([]);
            }
            this.isOpen = false;
            this.close.emit(this);
        }
    }
    selectAllTest() {
        if (this.multiple() && Array.isArray(this.selectedOption) && this.selectedOption.length) {
            let options = 0;
            this._data.forEach(e => {
                if (Select2Utils.isGroup(e)) {
                    e.options.forEach(f => {
                        if (!f.disabled && !f.hide) {
                            options++;
                        }
                    });
                }
                else if (!e.disabled && !e.hide) {
                    options++;
                }
            });
            return this.selectedOption.length === options;
        }
        return false;
    }
    testSelection(option) {
        if (option.disabled) {
            return false;
        }
        const limitSelection = this.limitSelection();
        return !this.multiple() || !limitSelection || this.optionsSize() < limitSelection;
    }
    testValueChange(value1, value2) {
        if (((value1 === null || value1 === undefined) && (value2 === null || value2 === undefined)) ||
            value1 === value2) {
            return false;
        }
        if (this.multiple() &&
            value1?.length &&
            value2?.length &&
            value1.length === value2.length) {
            for (const e1 of value1) {
                const test = value2.indexOf(e1) > -1;
                if (!test) {
                    return true;
                }
            }
            return false;
        }
        return true;
    }
    updateFilteredData() {
        let result = this._data;
        if (this.multiple() && this.hideSelectedItems()) {
            result = Select2Utils.getFilteredSelectedData(result, this.selectedOption);
        }
        if (!this.customSearchEnabled() && this.searchText && this.searchText.length >= +this.minCharForSearch()) {
            result = Select2Utils.getFilteredData(result, this.searchText, this.editPattern());
        }
        if (this.maxResults() > 0) {
            const data = Select2Utils.getReduceData(result, +this.maxResults());
            result = data.result;
            this.maxResultsExceeded = data.reduce;
        }
        else {
            this.maxResultsExceeded = false;
        }
        if (Select2Utils.optionIsNotInFilteredData(result, this.hoveringOption())) {
            this.hoveringOption.set(Select2Utils.getFirstAvailableOption(result));
        }
        this.filteredData.set(result);
        // replace selected options when data change
        if (this.multiple() && Array.isArray(this.selectedOption) && this.selectedOption.length) {
            const options = [];
            const value = this.selectedOption.map(e => e.value);
            this._data.forEach(e => {
                if (Select2Utils.isGroup(e)) {
                    e.options.forEach(f => {
                        if (value.includes(f.value)) {
                            options.push(f);
                        }
                    });
                }
                else if (value.includes(e.value)) {
                    options.push(e);
                }
            });
            // preserve selection order
            this.selectedOption = this.selectedOption.map(e => options.find(f => f.value === e.value));
        }
        else if (!Array.isArray(this.selectedOption) && this.selectedOption) {
            let option = null;
            this._data.forEach(e => {
                if (Select2Utils.isGroup(e)) {
                    e.options.forEach(f => {
                        if (this.selectedOption.value === f.value) {
                            option = f;
                        }
                    });
                }
                else if (this.selectedOption.value === e.value) {
                    option = e;
                }
            });
            this.selectedOption = option;
        }
        this._changeDetectorRef.detectChanges();
    }
    clickExit() {
        this._focus(false);
    }
    isInSelect(elt) {
        return this.ifParentContainsId(elt, this.id()) || this.ifParentContainsId(elt, this.idOverlay());
    }
    ifParentContainsClass(element, cssClass) {
        return this.getParentElementByClass(element, cssClass) !== null;
    }
    ifParentContainsId(element, id) {
        return this.getParentElementById(element, id) !== null;
    }
    getParentElementByClass(element, cssClass) {
        return this.containClasses(element, cssClass.trim().split(/\s+/))
            ? element
            : element.parentElement
                ? this.getParentElementByClass(element.parentElement, cssClass)
                : null;
    }
    getParentElementById(element, id) {
        return element.id === id
            ? element
            : element.parentElement
                ? this.getParentElementById(element.parentElement, id)
                : null;
    }
    containClasses(element, cssClasses) {
        if (!element.classList) {
            return false;
        }
        for (const cssClass of cssClasses) {
            if (!element.classList.contains(cssClass)) {
                return false;
            }
        }
        return true;
    }
    containAlmostOneClasses(element, cssClasses) {
        if (!element.classList) {
            return false;
        }
        let containAlmostOne = false;
        for (const cssClass of cssClasses) {
            if (element.classList.contains(cssClass)) {
                containAlmostOne = true;
            }
        }
        return containAlmostOne;
    }
    clickOnSelect2Element(element) {
        return this.containAlmostOneClasses(element, [
            'select2-overlay-backdrop',
            'select2-label-content',
            'select2-selection__rendered',
            'select2-results__option',
        ]);
    }
    focusin(options) {
        if (!this.disabledState) {
            this._focus(true, options);
        }
    }
    focusout(event) {
        if (!event.relatedTarget || !this.isInSelect(event.relatedTarget)) {
            this._focus(false);
            this._onTouched();
        }
    }
    select(option, emit = true, closeOnSelect = true) {
        let value;
        if (option !== null && option !== undefined) {
            if (this.multiple()) {
                this.selectedOption ??= [];
                const options = this.selectedOption;
                const index = options.findIndex(op => op.value === option.value);
                if (index === -1) {
                    options.push(option);
                }
                else {
                    options.splice(index, 1);
                }
                value = this.selectedOption.map(op => op.value);
            }
            else {
                this.selectedOption = option;
                if (closeOnSelect && this.isOpen) {
                    this.isOpen = false;
                    this.close.emit(this);
                    this.selectionElement?.focus();
                }
                value = this.selectedOption.value;
                if (!option && this._value === null) {
                    this._value = value;
                }
            }
        }
        else {
            // when remove value
            if (Array.isArray(this.selectedOption) ? this.selectedOption?.length : this.selectedOption) {
                value = '';
            }
            this.selectedOption = null;
        }
        if (this.multiple() && this.hideSelectedItems()) {
            this.updateFilteredData();
        }
        emit &&= value !== undefined && this.testDiffValue(this._value, value);
        if (this._control) {
            this._onChange(value);
        }
        if (emit) {
            this.writeValue(value);
            setTimeout(() => {
                this.updateEvent(value);
            });
        }
    }
    testDiffValue(val1, val2) {
        return Array.isArray(val1) ? val1?.length !== val2?.length : val1 !== val2;
    }
    keyDown(event, create = false) {
        if (create && this._testKey(event, ['Enter'])) {
            this.createAndAdd(event);
        }
        else if (this._testKey(event, [{ key: 'ArrowDown', altKey: false }])) {
            this.moveDown();
            this.actionAfterKeyDownMoveAction(event);
        }
        else if (this._testKey(event, [{ key: 'ArrowUp', altKey: false }])) {
            this.moveUp();
            this.actionAfterKeyDownMoveAction(event);
        }
        else if (this._testKey(event, ['Home'])) {
            this.moveStart();
            this.actionAfterKeyDownMoveAction(event);
        }
        else if (this._testKey(event, ['End'])) {
            this.moveEnd();
            this.actionAfterKeyDownMoveAction(event);
        }
        else if (this._testKey(event, ['PageUp'])) {
            this.moveUp(10);
            this.actionAfterKeyDownMoveAction(event);
        }
        else if (this._testKey(event, ['PageDown'])) {
            this.moveDown(10);
            this.actionAfterKeyDownMoveAction(event);
        }
        else if (this._testKey(event, ['Enter']) || (this.isSearchboxHidden && this._testKey(event, [' ']))) {
            this.selectByEnter(true);
            event.preventDefault();
        }
        else if (this._testKey(event, CLOSE_KEYS) && this.isOpen) {
            this.toggleOpenAndClose();
            this._focus(true);
        }
    }
    actionAfterKeyDownMoveAction(event) {
        event.preventDefault();
        if (this.nativeKeyboard() && !this.multiple()) {
            this.selectByEnter(false);
        }
    }
    openKey(event, create = false) {
        if (create && this._testKey(event, ['Enter'])) {
            this.createAndAdd(event);
        }
        else if (this._testKey(event, this.nativeKeyboard() && !this.multiple() ? OPEN_KEYS_NATIVE : OPEN_KEYS)) {
            this.toggleOpenAndClose(true, true, event);
            event.preventDefault();
        }
        else if (this.nativeKeyboard() && !this.multiple() && this._testKey(event, CLOSE_KEYS_NATIVE)) {
            this.updateScrollFromOption(this.select2Option);
            this.keyDown(event, create);
        }
        else if (this._testKey(event, CLOSE_KEYS)) {
            if (this.isOpen) {
                this.toggleOpenAndClose();
                this._onTouched();
            }
        }
    }
    searchUpdate(e) {
        this.searchText = e.target.value;
        if (!this.customSearchEnabled()) {
            this.updateFilteredData();
        }
        else {
            this.search.emit({
                component: this,
                value: this._value,
                search: this.searchText,
                data: this._data,
                filteredData: (data) => {
                    this.filteredData.set(data);
                    this._changeDetectorRef.markForCheck();
                },
            });
        }
    }
    isSelected(option) {
        return Select2Utils.isSelected(this.selectedOption, option, this.multiple());
    }
    isDisabled(option) {
        return option.disabled ? 'true' : 'false';
    }
    removeSelection(e, option) {
        if (this.readonly() || this.disabledState) {
            return;
        }
        Select2Utils.removeSelection(this.selectedOption, option);
        if (this.multiple() && this.hideSelectedItems()) {
            this.updateFilteredData();
        }
        const value = this.selectedOption.map(op => op.value);
        if (this._control) {
            this._onChange(value);
        }
        else {
            this._value = value ?? null;
        }
        this.updateEvent(value);
        this.removeOption.emit({
            component: this,
            value: value,
            removedOption: option,
        });
        e.preventDefault();
        e.stopPropagation();
        if (this.isOpen) {
            this._focusSearchbox();
        }
        else {
            this._focus(true);
        }
    }
    /**
     * Sets the model value. Implemented as part of ControlValueAccessor.
     * @param value
     */
    writeValue(value) {
        this.selectedOption = null;
        this._setSelectionByValue(this.multiple() ? (value ?? []) : value);
        if (this.testValueChange(this._value, value)) {
            this._value = value;
        }
    }
    /**
     * Saves a callback function to be invoked when the select's value
     * changes from user input. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the value changes.
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * Saves a callback function to be invoked when the select is blurred
     * by the user. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the component has been touched.
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * Sets whether the component should be disabled.
     * Implemented as part of ControlValueAccessor.
     * @param isDisabled
     */
    setDisabledState(isDisabled) {
        this._disabled = isDisabled;
    }
    onScroll(way) {
        this.scroll.emit({
            component: this,
            way,
            search: this.innerSearchText,
            data: this._data,
        });
    }
    drop(event) {
        if (Array.isArray(this.selectedOption)) {
            moveItemInArray(this.selectedOption, event.previousIndex, event.currentIndex);
            const value = this.selectedOption.map(e => e.value);
            this.writeValue(value);
            this._value = value;
            this.updateEvent(value);
        }
    }
    _isErrorState() {
        const isInvalid = this._control?.invalid;
        const isTouched = this._control?.touched;
        const isSubmitted = this._parentFormGroup?.submitted || this._parentForm?.submitted;
        return !!(isInvalid && (isTouched || isSubmitted));
    }
    _selectionOverrideLabel() {
        const selectionOverride = this.selectionOverride();
        if (typeof selectionOverride === 'function') {
            return selectionOverride({
                size: this.optionsSize(),
                options: Array.isArray(this.selectedOption)
                    ? this.selectedOption
                    : this.selectedOption
                        ? [this.selectedOption]
                        : null,
            });
        }
        else if (typeof selectionOverride === 'string') {
            return selectionOverride.replaceAll('%size%', `${this.optionsSize()}`);
        }
        return undefined;
    }
    getElementId(elt) {
        if (!elt) {
            return elt;
        }
        else if (elt.id) {
            return elt.id;
        }
        const [i, j] = this._getElementPath(elt);
        const toSuffix = (index) => (index !== undefined ? `-${index}` : '');
        elt.id ??= `${this.id()}-option${toSuffix(i)}${toSuffix(j)}`;
        return elt.id;
    }
    _getElementPath(elt) {
        for (let i = 0; i < this._data.length; i++) {
            const optionOrGroup = this._data[i];
            if (optionOrGroup === elt) {
                return [i];
            }
            else if (Select2Utils.isGroup(optionOrGroup)) {
                const j = optionOrGroup.options.findIndex(o => o === elt);
                if (j >= 0) {
                    return [i, j];
                }
            }
        }
        return [];
    }
    _toGroup(group) {
        return group;
    }
    _toOption(option) {
        return option;
    }
    updateEvent(value) {
        this.update.emit({
            component: this,
            value: value,
            options: Array.isArray(this.selectedOption)
                ? this.selectedOption
                : this.selectedOption
                    ? [this.selectedOption]
                    : null,
        });
    }
    optionsSize() {
        return Array.isArray(this.selectedOption) ? this.selectedOption.length : this.selectedOption ? 1 : 0;
    }
    addItem(value) {
        let item = Select2Utils.getOptionByValue(this._data, value);
        if (!item) {
            item = {
                value,
                label: value,
            };
            this._data.push(item);
        }
        return item;
    }
    createAndAdd(e) {
        const value = e.target.value;
        if (value.trim()) {
            e.target.value = '';
            this.searchText = '';
            const item = this.addItem(value.trim());
            this.click(item);
            this.updateFilteredData();
            this.autoCreateItem.emit({
                value: item,
                component: this,
                options: Array.isArray(this.selectedOption)
                    ? this.selectedOption
                    : this.selectedOption
                        ? [this.selectedOption]
                        : null,
            });
        }
        this.stopEvent(e);
    }
    moveUp(times = 1) {
        for (let i = 0; i < times; i++) {
            this.updateScrollFromOption(Select2Utils.getPreviousOption(this.filteredData(), this.hoveringOption()));
        }
    }
    moveDown(times = 1) {
        for (let i = 0; i < times; i++) {
            this.updateScrollFromOption(Select2Utils.getNextOption(this.filteredData(), this.hoveringOption()));
        }
    }
    moveStart() {
        this.updateScrollFromOption(Select2Utils.getFirstOption(this.filteredData()));
    }
    moveEnd() {
        this.updateScrollFromOption(Select2Utils.getLastOption(this.filteredData()));
    }
    updateScrollFromOption(option) {
        if (option) {
            this.hoveringOption.set(option);
            const domElement = this.results().find(r => r.nativeElement.innerText.trim() === option.label);
            if (domElement && this.resultsElement) {
                const resultClientRect = this.resultsElement.getBoundingClientRect();
                const eltClientRect = domElement.nativeElement.getBoundingClientRect();
                if (eltClientRect.bottom > resultClientRect.bottom) {
                    // Needs element scroll to bottom
                    this.resultsElement.scrollTop += eltClientRect.bottom - resultClientRect.bottom;
                }
                else if (resultClientRect.top > eltClientRect.top) {
                    // Needs element scroll to top
                    this.resultsElement.scrollTop += eltClientRect.top - resultClientRect.top;
                }
            }
        }
    }
    selectByEnter(close = false) {
        const hoveringOption = this.hoveringOption();
        if (hoveringOption) {
            this.select(hoveringOption, true, close);
        }
    }
    _testKey(event, refs = []) {
        const { key, altKey } = event;
        return refs.some(ref => {
            if (typeof ref === 'string') {
                return ref === key;
            }
            else {
                return key === ref.key && altKey === ref.altKey;
            }
        });
    }
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    _setSelectionByValue(value) {
        if (this.selectedOption || (value !== undefined && value !== null)) {
            const isArray = Array.isArray(value);
            if (this.multiple() && value && !isArray) {
                throw new Error('Non array value.');
            }
            else if (this._data) {
                if (this.multiple()) {
                    if (!Array.isArray(this.selectedOption)) {
                        this.selectedOption = []; // if value is null, then empty option and return
                    }
                    if (isArray) {
                        // value is not null. Preselect value
                        Select2Utils.getOptionsByValue(this._data, value, this.multiple()).forEach(item => this.select(item, false));
                        this._value ??= value;
                        if (this.testDiffValue(this._value, value)) {
                            this.updateEvent(value);
                        }
                    }
                    else if (value === null) {
                        // fix if value is null
                        this._value = [];
                        this.reset();
                        this.select(null, false);
                        if (this.testDiffValue(this._value, value)) {
                            this._value = [];
                            this.updateEvent(this._value);
                        }
                    }
                }
                else {
                    this._value = value;
                    this.select(Select2Utils.getOptionByValue(this._data, this._value), this.isOpen, false);
                }
            }
            else if (this._control) {
                this._control.viewToModelUpdate(value);
            }
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Does some manual dirty checking on the native input `value` property. */
    _dirtyCheckNativeValue() {
        const newValue = this.value();
        if (this._previousNativeValue !== newValue) {
            this._previousNativeValue = newValue;
            this._stateChanges.next();
        }
    }
    _focusSearchbox(focus = true) {
        if (!this.isSearchboxHidden) {
            setTimeout(() => {
                const searchInput = this.searchInput();
                if (searchInput && searchInput.nativeElement && focus) {
                    searchInput.nativeElement.focus();
                }
            });
        }
    }
    _focus(state, options) {
        if (state) {
            const eltToFocus = !this.isSearchboxHidden && this.isOpen
                ? this.searchInput().nativeElement
                : this.selection().nativeElement;
            if (document.activeElement !== eltToFocus) {
                eltToFocus.focus(options);
            }
        }
        else if (document.activeElement === this.selection()?.nativeElement ||
            document.activeElement === this.searchInput()?.nativeElement) {
            document.activeElement.blur();
        }
        this._updateFocusState(state);
    }
    _isAbobeOverlay() {
        const listPosition = this.listPosition();
        return this.overlay() && this._overlayPosition && listPosition === 'auto'
            ? this._overlayPosition === 'top'
            : listPosition === 'above';
    }
    _updateFocusState(state) {
        if (!state && this.focused) {
            this.focused = state;
            this.blur.emit(this);
        }
        else if (state && !this.focused) {
            this.focused = state;
            this.focus.emit(this);
        }
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.4", ngImport: i0, type: Select2, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i2.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    /** @nocollapse */ static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.0.4", type: Select2, isStandalone: true, selector: "select2, ng-select2", inputs: { data: { classPropertyName: "data", publicName: "data", isSignal: true, isRequired: true, transformFunction: null }, minCharForSearch: { classPropertyName: "minCharForSearch", publicName: "minCharForSearch", isSignal: true, isRequired: false, transformFunction: null }, displaySearchStatus: { classPropertyName: "displaySearchStatus", publicName: "displaySearchStatus", isSignal: true, isRequired: false, transformFunction: null }, placeholder: { classPropertyName: "placeholder", publicName: "placeholder", isSignal: true, isRequired: false, transformFunction: null }, limitSelection: { classPropertyName: "limitSelection", publicName: "limitSelection", isSignal: true, isRequired: false, transformFunction: null }, listPosition: { classPropertyName: "listPosition", publicName: "listPosition", isSignal: true, isRequired: false, transformFunction: null }, overlay: { classPropertyName: "overlay", publicName: "overlay", isSignal: true, isRequired: false, transformFunction: null }, multiple: { classPropertyName: "multiple", publicName: "multiple", isSignal: true, isRequired: false, transformFunction: null }, multipleDrag: { classPropertyName: "multipleDrag", publicName: "multipleDrag", isSignal: true, isRequired: false, transformFunction: null }, styleMode: { classPropertyName: "styleMode", publicName: "styleMode", isSignal: true, isRequired: false, transformFunction: null }, noResultMessage: { classPropertyName: "noResultMessage", publicName: "noResultMessage", isSignal: true, isRequired: false, transformFunction: null }, maxResults: { classPropertyName: "maxResults", publicName: "maxResults", isSignal: true, isRequired: false, transformFunction: null }, maxResultsMessage: { classPropertyName: "maxResultsMessage", publicName: "maxResultsMessage", isSignal: true, isRequired: false, transformFunction: null }, infiniteScrollDistance: { classPropertyName: "infiniteScrollDistance", publicName: "infiniteScrollDistance", isSignal: true, isRequired: false, transformFunction: null }, infiniteScrollThrottle: { classPropertyName: "infiniteScrollThrottle", publicName: "infiniteScrollThrottle", isSignal: true, isRequired: false, transformFunction: null }, infiniteScroll: { classPropertyName: "infiniteScroll", publicName: "infiniteScroll", isSignal: true, isRequired: false, transformFunction: null }, autoCreate: { classPropertyName: "autoCreate", publicName: "autoCreate", isSignal: true, isRequired: false, transformFunction: null }, noLabelTemplate: { classPropertyName: "noLabelTemplate", publicName: "noLabelTemplate", isSignal: true, isRequired: false, transformFunction: null }, editPattern: { classPropertyName: "editPattern", publicName: "editPattern", isSignal: true, isRequired: false, transformFunction: null }, templates: { classPropertyName: "templates", publicName: "templates", isSignal: true, isRequired: false, transformFunction: null }, templateSelection: { classPropertyName: "templateSelection", publicName: "templateSelection", isSignal: true, isRequired: false, transformFunction: null }, resultMaxHeight: { classPropertyName: "resultMaxHeight", publicName: "resultMaxHeight", isSignal: true, isRequired: false, transformFunction: null }, customSearchEnabled: { classPropertyName: "customSearchEnabled", publicName: "customSearchEnabled", isSignal: true, isRequired: false, transformFunction: null }, minCountForSearch: { classPropertyName: "minCountForSearch", publicName: "minCountForSearch", isSignal: true, isRequired: false, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, required: { classPropertyName: "required", publicName: "required", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null }, hideSelectedItems: { classPropertyName: "hideSelectedItems", publicName: "hideSelectedItems", isSignal: true, isRequired: false, transformFunction: null }, readonly: { classPropertyName: "readonly", publicName: "readonly", isSignal: true, isRequired: false, transformFunction: null }, value: { classPropertyName: "value", publicName: "value", isSignal: true, isRequired: false, transformFunction: null }, tabIndex: { classPropertyName: "tabIndex", publicName: "tabIndex", isSignal: true, isRequired: false, transformFunction: null }, resettable: { classPropertyName: "resettable", publicName: "resettable", isSignal: true, isRequired: false, transformFunction: null }, resetSelectedValue: { classPropertyName: "resetSelectedValue", publicName: "resetSelectedValue", isSignal: true, isRequired: false, transformFunction: null }, nativeKeyboard: { classPropertyName: "nativeKeyboard", publicName: "nativeKeyboard", isSignal: true, isRequired: false, transformFunction: null }, grid: { classPropertyName: "grid", publicName: "grid", isSignal: true, isRequired: false, transformFunction: null }, selectionOverride: { classPropertyName: "selectionOverride", publicName: "selectionOverride", isSignal: true, isRequired: false, transformFunction: null }, selectionNoWrap: { classPropertyName: "selectionNoWrap", publicName: "selectionNoWrap", isSignal: true, isRequired: false, transformFunction: null }, showSelectAll: { classPropertyName: "showSelectAll", publicName: "showSelectAll", isSignal: true, isRequired: false, transformFunction: null }, removeAllText: { classPropertyName: "removeAllText", publicName: "removeAllText", isSignal: true, isRequired: false, transformFunction: null }, selectAllText: { classPropertyName: "selectAllText", publicName: "selectAllText", isSignal: true, isRequired: false, transformFunction: null }, title: { classPropertyName: "title", publicName: "title", isSignal: true, isRequired: false, transformFunction: null }, ariaLabelledby: { classPropertyName: "ariaLabelledby", publicName: "ariaLabelledby", isSignal: true, isRequired: false, transformFunction: null }, ariaDescribedby: { classPropertyName: "ariaDescribedby", publicName: "ariaDescribedby", isSignal: true, isRequired: false, transformFunction: null }, ariaInvalid: { classPropertyName: "ariaInvalid", publicName: "ariaInvalid", isSignal: true, isRequired: false, transformFunction: null }, ariaResetButtonDescription: { classPropertyName: "ariaResetButtonDescription", publicName: "ariaResetButtonDescription", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { update: "update", autoCreateItem: "autoCreateItem", open: "open", close: "close", focus: "focus", blur: "blur", search: "search", scroll: "scroll", removeOption: "removeOption" }, host: { listeners: { "document:click": "clickDetection($event)" }, properties: { "id": "id()", "class.select2-selection-nowrap": "selectionNoWrap()", "class.material": "this.classMaterial", "class.nostyle": "this.classNostyle", "class.borderless": "this.classBorderless", "class.select2-above": "this.select2above" } }, viewQueries: [{ propertyName: "cdkConnectedOverlay", first: true, predicate: CdkConnectedOverlay, descendants: true, isSignal: true }, { propertyName: "selection", first: true, predicate: ["selection"], descendants: true, isSignal: true }, { propertyName: "resultContainer", first: true, predicate: ["results"], descendants: true, isSignal: true }, { propertyName: "results", predicate: ["result"], descendants: true, isSignal: true }, { propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, isSignal: true }, { propertyName: "dropdown", first: true, predicate: ["dropdown"], descendants: true, isSignal: true }], usesOnChanges: true, ngImport: i0, template: "<label class=\"select2-label\" (click)=\"toggleOpenAndClose()\" [id]=\"idLabel()\">\n  <ng-content select=\"select2-label, ng-select2-label\"></ng-content>\n  @if (required()) {\n    <span class=\"select2-required\" aria-hidden=\"true\"></span>\n  }\n</label>\n\n<div\n  class=\"select2 select2-container select2-container--default\"\n  [class.select2-container--focus]=\"focused\"\n  [class.select2-container--below]=\"!select2above\"\n  [class.select2-container--above]=\"select2above\"\n  [class.select2-container--open]=\"isOpen\"\n  [class.select2-container--disabled]=\"disabled()\"\n  [class.select2-container--readonly]=\"readonly()\"\n>\n  <div\n    [id]=\"idCombo()\"\n    role=\"combobox\"\n    class=\"selection\"\n    #selection\n    #trigger=\"cdkOverlayOrigin\"\n    [tabindex]=\"!this.isOpen ? _tabIndex : '-1'\"\n    [attr.aria-labelledby]=\"ariaLabelledby() ?? idLabel()\"\n    [attr.aria-expanded]=\"isOpen\"\n    aria-haspopup=\"listbox\"\n    [attr.aria-controls]=\"idOptions()\"\n    [attr.aria-activedescendant]=\"isOpen ? hoveringOptionId() : null\"\n    [attr.aria-describedby]=\"ariaDescribedby()\"\n    [attr.title]=\"title()\"\n    [attr.aria-invalid]=\"_isErrorState() || ariaInvalid() ? 'true' : null\"\n    [attr.aria-required]=\"required() ? 'true' : null\"\n    [attr.aria-readonly]=\"readonly() ? 'true' : null\"\n    [attr.aria-disabled]=\"disabled() ? 'true' : null\"\n    (click)=\"toggleOpenAndClose()\"\n    (focus)=\"focusin()\"\n    (focusout)=\"focusout($event)\"\n    (keydown)=\"openKey($event)\"\n    cdkOverlayOrigin\n    [class.select2-focused]=\"focused\"\n  >\n    <div\n      class=\"select2-selection\"\n      [class.select2-selection--multiple]=\"multiple()\"\n      [class.select2-selection--single]=\"!multiple()\"\n    >\n      @if (selectionOverride()) {\n        <span class=\"select2-selection__override\" [innerHTML]=\"_selectionOverrideLabel()\"></span>\n\n        @if (\n          resettable() &&\n          !(disabled() || readonly()) &&\n          resetSelectedValue() !== _value &&\n          ((!multiple() && select2Option) || (multiple() && select2Options.length > 0))\n        ) {\n          <ng-container *ngTemplateOutlet=\"resetButton\"></ng-container>\n        }\n      } @else if (!multiple()) {\n        <span\n          class=\"select2-selection__rendered\"\n          [title]=\"select2Option?.label || ''\"\n          [attr.aria-live]=\"nativeKeyboard() && !isOpen ? 'polite' : null\"\n        >\n          @if (!select2Option) {\n            <span>&nbsp;</span>\n          }\n          @if (select2Option) {\n            @if (!hasTemplate(select2Option, 'option', true) || noLabelTemplate()) {\n              <span [innerHTML]=\"select2Option.label\"></span>\n            } @else {\n              <ng-container\n                *ngTemplateOutlet=\"getTemplate(select2Option, 'option', true); context: select2Option\"\n              ></ng-container>\n            }\n          }\n          <span\n            [class.select2-selection__placeholder__option]=\"selectedOption\"\n            class=\"select2-selection__placeholder\"\n            >{{ placeholder() }}</span\n          >\n        </span>\n\n        @if (resettable() && resetSelectedValue() !== _value && select2Option && !(disabled() || readonly())) {\n          <ng-container *ngTemplateOutlet=\"resetButton\"></ng-container>\n        }\n        <span class=\"select2-selection__arrow\" role=\"presentation\"> </span>\n      } @else {\n        <ul\n          class=\"select2-selection__rendered\"\n          cdkDropList\n          cdkDropListOrientation=\"mixed\"\n          [cdkDropListDisabled]=\"!multipleDrag()\"\n          (cdkDropListDropped)=\"drop($event)\"\n        >\n          @if (!autoCreate()) {\n            <span\n              [class.select2-selection__placeholder__option]=\"select2Options.length > 0\"\n              class=\"select2-selection__placeholder\"\n              >{{ placeholder() }}</span\n            >\n          }\n          @for (op of selectedOption || []; track op.id) {\n            <li\n              class=\"select2-selection__choice\"\n              [title]=\"op.label\"\n              tabindex=\"0\"\n              (focus)=\"_updateFocusState(true)\"\n              (keydown.enter)=\"removeSelection($event, op)\"\n              cdkDrag\n            >\n              @if (!(disabled() || readonly())) {\n                <span\n                  (click)=\"removeSelection($event, op)\"\n                  class=\"select2-selection__choice__remove\"\n                  role=\"presentation\"\n                  aria-hidden=\"true\"\n                  >\u00D7</span\n                >\n              }\n              @if (!hasTemplate(op, 'option', true) || noLabelTemplate()) {\n                <span [innerHTML]=\"op.label\"></span>\n              } @else {\n                <ng-container *ngTemplateOutlet=\"getTemplate(op, 'option', true); context: op\"></ng-container>\n              }\n            </li>\n          }\n          @if (autoCreate()) {\n            <li class=\"select2-selection__auto-create\" (focus)=\"stopEvent($event)\" (blur)=\"stopEvent($event)\">\n              <input\n                [id]=\"id() + '-create-field'\"\n                (click)=\"toggleOpenAndClose(false, true); stopEvent($event)\"\n                (keydown)=\"keyDown($event, true)\"\n                (keyup)=\"searchUpdate($event)\"\n                (change)=\"prevChange($event)\"\n                class=\"select2-create__field\"\n                type=\"search\"\n                role=\"textbox\"\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                autocapitalize=\"off\"\n                spellcheck=\"false\"\n              />\n            </li>\n          }\n        </ul>\n        @if (resettable() && $any(selectedOption)?.length > 0 && !(disabled() || readonly())) {\n          <ng-container *ngTemplateOutlet=\"resetButton\"></ng-container>\n        }\n      }\n    </div>\n  </div>\n  @if (!overlay()) {\n    <ng-container *ngTemplateOutlet=\"containerTemplate\"></ng-container>\n  }\n\n  <div class=\"select2-subscript-wrapper\">\n    <ng-content select=\"select2-hint, ng-select2-hint\"></ng-content>\n  </div>\n</div>\n\n<ng-template\n  cdkConnectedOverlay\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"select2-overlay-backdrop\"\n  [cdkConnectedOverlayOrigin]=\"trigger\"\n  [cdkConnectedOverlayOpen]=\"this.isOpen && overlay()\"\n  [cdkConnectedOverlayMinWidth]=\"overlayWidth\"\n  [cdkConnectedOverlayHeight]=\"overlayHeight\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  (backdropClick)=\"toggleOpenAndClose()\"\n>\n  <ng-container *ngTemplateOutlet=\"containerTemplate\"></ng-container>\n</ng-template>\n\n<ng-template #containerTemplate>\n  <div\n    [id]=\"idOverlay()\"\n    class=\"select2-container select2-container--default select2-container-dropdown\"\n    [class.select2-container--open]=\"isOpen\"\n    [class.select2-overlay]=\"overlay()\"\n    [class.select2-position-auto]=\"listPosition() === 'auto'\"\n    [class.select2-style-borderless]=\"styleMode() === 'borderless'\"\n  >\n    <div\n      #dropdown\n      class=\"select2-dropdown\"\n      [class.select2-dropdown--below]=\"!select2above\"\n      [class.select2-dropdown--above]=\"select2above\"\n    >\n      <div class=\"select2-search select2-search--dropdown\" [class.select2-search--hide]=\"isSearchboxHidden\">\n        <input\n          #searchInput\n          [id]=\"id() + '-search-field'\"\n          [value]=\"searchText\"\n          (keydown)=\"keyDown($event, autoCreate())\"\n          (keyup)=\"searchUpdate($event)\"\n          (change)=\"prevChange($event)\"\n          class=\"select2-search__field\"\n          type=\"search\"\n          role=\"combobox\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          autocapitalize=\"off\"\n          spellcheck=\"false\"\n          [attr.tabindex]=\"this.isOpen ? _tabIndex : '-1'\"\n          [attr.aria-labelledby]=\"ariaLabelledby() ?? idLabel()\"\n          aria-autocomplete=\"list\"\n          [attr.aria-controls]=\"idOptions()\"\n          aria-expanded=\"true\"\n          [attr.aria-activedescendant]=\"hoveringOptionId()\"\n        />\n      </div>\n\n      <div class=\"select2-results\">\n        <ul\n          [id]=\"idOptions()\"\n          #results\n          class=\"select2-results__options\"\n          [class.select2-grid]=\"grid() && isNumber(grid())\"\n          [class.select2-grid-auto]=\"grid() && !isNumber(grid())\"\n          [style.max-height]=\"resultMaxHeight()\"\n          [style.--grid-size]=\"grid() || null\"\n          role=\"listbox\"\n          tabindex=\"-1\"\n          infiniteScroll\n          [infiniteScrollDisabled]=\"!infiniteScroll() && !isOpen\"\n          [infiniteScrollDistance]=\"infiniteScrollDistance()\"\n          [infiniteScrollThrottle]=\"infiniteScrollThrottle()\"\n          [infiniteScrollContainer]=\"results\"\n          [attr.aria-labelledby]=\"ariaLabelledby() ?? idLabel()\"\n          [attr.aria-multiselectable]=\"multiple()\"\n          [attr.aria-activedescendant]=\"hoveringOptionId()\"\n          (scrolled)=\"onScroll('down')\"\n          (scrolledUp)=\"onScroll('up')\"\n          (keydown)=\"keyDown($event)\"\n        >\n          @if (showSelectAll() && multiple()) {\n            <li class=\"select2-results__option select2-selectall\" (click)=\"selectAll()\" tabindex=\"1\" aria-selected>\n              <div class=\"select2-label-content\">\n                {{ selectAllTest() ? removeAllText() : selectAllText() }}\n              </div>\n            </li>\n          }\n\n          @for (groupOrOption of filteredData(); track groupOrOption.id; let i = $index) {\n            @let group = _toGroup(groupOrOption);\n            @if (group.options !== undefined) {\n              <li class=\"select2-results__option select2-results__group\">\n                <span [id]=\"getElementId(groupOrOption)\">\n                  @if (!hasTemplate(group, 'group')) {\n                    <strong\n                      [attr.class]=\"'select2-results__group' + (group.classes ? ' ' + group.classes : '')\"\n                      [innerHTML]=\"group.label\"\n                    ></strong>\n                  } @else {\n                    <ng-container *ngTemplateOutlet=\"getTemplate(group, 'group'); context: group\"> </ng-container>\n                  }\n                </span>\n                <ul\n                  class=\"select2-results__options select2-results__options--nested\"\n                  role=\"group\"\n                  [attr.aria-labelledby]=\"getElementId(groupOrOption)\"\n                >\n                  @for (option of group.options; track option.id; let j = $index) {\n                    <li\n                      #result\n                      [id]=\"getElementId(option)\"\n                      [class]=\"getOptionStyle(option)\"\n                      role=\"option\"\n                      [attr.aria-selected]=\"isSelected(option)\"\n                      [attr.aria-disabled]=\"isDisabled(option)\"\n                      (mouseenter)=\"mouseenter(option)\"\n                      (click)=\"click(option)\"\n                    >\n                      @if (!hasTemplate(option, 'option')) {\n                        <div class=\"select2-label-content\" [innerHTML]=\"option.label\"></div>\n                      } @else {\n                        <ng-container *ngTemplateOutlet=\"getTemplate(option, 'option'); context: option\">\n                        </ng-container>\n                      }\n                    </li>\n                  }\n                </ul>\n              </li>\n            } @else {\n              @let option = _toOption(groupOrOption);\n              <li\n                #result\n                [id]=\"getElementId(groupOrOption)\"\n                [class]=\"getOptionStyle(option)\"\n                role=\"option\"\n                [attr.aria-selected]=\"isSelected(option)\"\n                [attr.aria-disabled]=\"isDisabled(option)\"\n                (mouseenter)=\"mouseenter(option)\"\n                (click)=\"click(option)\"\n              >\n                @if (!hasTemplate(option, 'option')) {\n                  <div [innerHTML]=\"option.label\" class=\"select2-label-content\"></div>\n                } @else {\n                  <ng-container *ngTemplateOutlet=\"getTemplate(option, 'option'); context: option\"> </ng-container>\n                }\n              </li>\n\n              <ng-template #li>\n                <ng-container *ngTemplateOutlet=\"getTemplate(option, 'option'); context: option\"> </ng-container>\n              </ng-template>\n            }\n          }\n          @if (!filteredData()?.length && noResultMessage()) {\n            <li class=\"select2-no-result select2-results__option\" [innerHTML]=\"noResultMessage()\"></li>\n          }\n          @if (maxResultsExceeded) {\n            <li class=\"select2-too-much-result select2-results__option\" [innerHTML]=\"maxResultsMessage()\"></li>\n          }\n        </ul>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #resetButton>\n  <button\n    type=\"button\"\n    (focus)=\"_updateFocusState(true)\"\n    (click)=\"reset($event)\"\n    (keydown)=\"$event.stopPropagation()\"\n    class=\"select2-selection__reset\"\n    [attr.aria-description]=\"ariaResetButtonDescription()\"\n    [attr.aria-controls]=\"idCombo()\"\n  >\n    <span aria-hidden=\"true\">\u00D7</span>\n  </button>\n</ng-template>\n", styles: [".select2-label{color:var(--select2-label-text-color, #000)}.select2-container{display:inline-block;position:relative;vertical-align:middle;box-sizing:border-box;margin:0;width:100%}.select2-container .select2-container-dropdown{position:absolute;opacity:0;width:0px}.select2-container .select2-selection--single{display:block;cursor:pointer;box-sizing:border-box;height:var(--select2-single-height, 28px);-webkit-user-select:none;user-select:none}.select2-container .select2-selection--single .select2-selection__rendered{display:block;flex:1 1 auto;padding:var(--select2-selection-padding, 0 0 0 8px);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-selection--single .select2-selection__clear{position:relative}.select2-container .select2-selection--multiple{display:block;cursor:pointer;box-sizing:border-box;min-height:var(--select2-multiple-height, 28px);-webkit-user-select:none;user-select:none}.select2-container .select2-selection--multiple .select2-selection__rendered{display:inline-flex;flex-wrap:wrap;gap:var(--select2-selection-multiple-gap, 2px 5px);padding-bottom:2px;padding-left:8px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-selection--multiple .select2-selection__rendered .select2-selection__auto-create{display:flex;flex:1 1 150px;min-width:150px}.select2-container .select2-selection--multiple .select2-selection__rendered .select2-create__field{border:0;width:100%}.select2-container .select2-selection--multiple .select2-selection__rendered .select2-create__field:focus{outline:0;border:0}.select2-container .select2-search--inline{float:left}.select2-container .select2-search--inline .select2-search__field{box-sizing:border-box;margin-top:5px;border:none;padding:0;font-size:100%}.select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-dropdown{display:block;position:absolute;z-index:1051;box-sizing:border-box;border:1px solid var(--select2-dropdown-border-color, #aaa);border-radius:var(--select2-selection-border-radius, 4px);background:var(--select2-dropdown-background, white);width:100%;height:0;overflow:hidden}.select2-dropdown .select2-label-content{display:contents}.select2-results{display:block}.select2-results__options{margin:0;padding:0;list-style:none}.select2-results__option{padding:var(--select2-option-padding, 6px);color:var(--select2-option-text-color, #000);-webkit-user-select:none;user-select:none}.select2-results__option[aria-selected]{cursor:pointer}.select2-container.select2-container-dropdown.select2-container--open{opacity:1;width:100%}.select2-container--open .select2-dropdown{height:auto;overflow:auto}.select2-container--open .select2-dropdown--above{display:flex;bottom:27px;flex-direction:column-reverse;border-bottom:var(--select2-dropdown-above-border-bottom, none);border-bottom-right-radius:var(--select2-dropdown-above-border-bottom-right-radius, 0);border-bottom-left-radius:var(--select2-dropdown-above-border-bottom-left-radius, 0)}.select2-container--open .select2-dropdown--below{border-top:var(--select2-dropdown-below-border-top, none);border-top-right-radius:var(--select2-dropdown-below-border-top-right-radius, 0);border-top-left-radius:var(--select2-dropdown-below-border-top-left-radius, 0)}.select2-search--dropdown{display:block;padding:4px}.select2-search--dropdown .select2-search__field{box-sizing:border-box;padding:4px;width:100%}.select2-search--dropdown .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-search--dropdown.select2-search--hide{display:none}.select2-close-mask{display:block;position:fixed;top:0;left:0;opacity:0;z-index:99;margin:0;border:0;padding:0;width:auto;min-width:100%;height:auto;min-height:100%}.select2-required:before{content:\"*\";color:var(--select2-required-color, red)}.select2-hidden-accessible{border:0!important;clip:rect(0 0 0 0)!important;position:absolute!important;margin:-1px!important;padding:0!important;width:1px!important;height:1px!important;overflow:hidden!important}.select2-container--default .select2-selection--single{display:flex;border:1px solid var(--select2-selection-border-color, #aaa);border-radius:var(--select2-selection-border-radius, 4px);background:var(--select2-selection-background, #fff)}.select2-container--default .select2-selection--single .select2-selection__rendered{color:var(--select2-selection-text-color, #111);line-height:var(--select2-selection-line-height, 28px)}.select2-container--default .select2-selection--single .select2-selection__clear{float:right;cursor:pointer;font-weight:700}.select2-container--default .select2-selection--single .select2-selection__placeholder{color:var(--select2-placeholder-color, #999)}.select2-container--default .select2-selection--single .select2-selection__placeholder span{overflow:hidden;text-overflow:var(--select2-placeholder-overflow, ellipsis);white-space:nowrap}.select2-container--default .select2-selection--single .select2-selection__placeholder__option{display:none}.select2-container--default .select2-selection--single .select2-selection__override{flex:1;margin:0 5px}.select2-container--default .select2-selection--single .select2-selection__reset,.select2-container--default .select2-selection--single .select2-selection__arrow{display:flex;justify-content:center;align-items:center;width:20px}.select2-container--default .select2-selection--single .select2-selection__arrow:before{border-width:5px 4px 0;border-style:solid;border-color:var(--select2-arrow-color, #888) transparent;width:0;height:0;content:\" \"}.select2-container--default .select2-selection__reset{align-self:center;border:var(--select2-reset-border, none);border-radius:var(--select2-reset-border-radius, 4px);background:var(--select2-reset-background, transparent);height:fit-content;color:var(--select2-reset-color, #999)}.select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear,.select2-container--default.select2-container--disabled .select2-selection__choice__remove,.select2-container--default.select2-container--readonly .select2-selection--single .select2-selection__clear,.select2-container--default.select2-container--readonly .select2-selection__choice__remove{display:none}.select2-container--default.select2-container--disabled .select2-selection--single,.select2-container--default.select2-container--disabled .select2-selection--multiple{cursor:default;background:var(--select2-selection-disabled-background, #eee)}.select2-container--default.select2-container--readonly .select2-selection--single,.select2-container--default.select2-container--readonly .select2-selection--multiple{background:var(--select2-selection-readonly-background, #eee)}.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow:before{border-width:0 4px 5px;border-color:transparent transparent var(--select2-arrow-color, #888)}.select2-container--default .select2-selection--multiple{display:flex;cursor:text;border:1px solid var(--select2-selection-border-color, #aaa);border-radius:var(--select2-selection-border-radius, 4px);background:var(--select2-selection-background, #fff)}.select2-container--default .select2-selection--multiple .select2-selection__rendered{flex:1 1 auto;align-items:center;box-sizing:border-box;margin:0;padding:var(--select2-selection-multiple-padding, 2px 5px);width:100%;min-height:1em;list-style:none}.select2-container--default .select2-selection--multiple .select2-selection__rendered li{line-height:var(--select2-selection-choice-line-height, 20px);list-style:none}.select2-container--default .select2-selection--multiple .select2-selection__placeholder{display:block;float:left;margin:-3px 0;width:100%;overflow:hidden;color:var(--select2-placeholder-color, #999);text-overflow:var(--select2-placeholder-overflow, ellipsis);white-space:nowrap}.select2-container--default .select2-selection--multiple .select2-selection__placeholder__option{display:none}.select2-container--default .select2-selection--multiple .select2-selection__override{flex:1;margin:0 5px}.select2-container--default .select2-selection--multiple .select2-selection__clear{float:right;cursor:pointer;margin-top:5px;margin-right:10px;font-weight:700}.select2-container--default .select2-selection--multiple .select2-selection__choice{cursor:default;border:1px solid var(--select2-selection-choice-border-color, #aaa);border-radius:var(--select2-selection-border-radius, 4px);background:var(--select2-selection-choice-background, #e4e4e4);padding:0 5px;color:var(--select2-selection-choice-text-color, #000)}.select2-container--default .select2-selection--multiple .select2-selection__choice.cdk-drag:not(.cdk-drag-disabled){cursor:move}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove{display:inline-block;cursor:pointer;margin-right:2px;color:var(--select2-selection-choice-close-color, #999);font-weight:700}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover{color:var(--select2-selection-choice-hover-close-color, #333)}.select2-container--default.select2-container--focused .select2-selection--multiple{outline:none;border:solid var(--select2-selection-focus-border-color, #000) 1px}.select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,.select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{outline:none;border:solid var(--select2-selection-focus-border-color, #000) 1px}.select2-container--default.select2-container--open.select2-container--above .select2-selection--single,.select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple{border-top-right-radius:0;border-top-left-radius:0}.select2-container--default.select2-container--open.select2-container--below .select2-selection--single,.select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom-right-radius:0;border-bottom-left-radius:0}.select2-container--default .select2-search--dropdown .select2-search__field{border:1px solid var(--select2-search-border-color, #aaa);border-radius:var(--select2-search-border-radius, 0px);background:1px solid var(--select2-search-background, #fff)}.select2-container--default .select2-search--inline .select2-search__field{-webkit-appearance:textfield;outline:none;box-shadow:none;border:none;background:transparent}.select2-container--default .select2-results>.select2-results__options{overflow-y:auto}.select2-container--default .select2-results__option.select2-results__group{grid-column:col-start/col-end;padding:0}.select2-container--default .select2-results__option[aria-disabled=true]{background:var(--select2-option-disabled-background, transparent);color:var(--select2-option-disabled-text-color, #999)}.select2-container--default .select2-results__option[aria-selected=true]{background:var(--select2-option-selected-background, #ddd);color:var(--select2-option-selected-text-color, #000)}.select2-container--default .select2-results__option .select2-results__option{padding-left:1em}.select2-container--default .select2-results__option .select2-results__option .select2-results__group{padding-left:0}.select2-container--default .select2-results__option .select2-results__option .select2-results__option{margin-left:-1em;padding-left:2em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-2em;padding-left:3em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-3em;padding-left:4em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-4em;padding-left:5em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-5em;padding-left:6em}.select2-container--default .select2-results__option--highlighted[aria-selected]{background:var(--select2-option-highlighted-background, #5897fb);color:var(--select2-option-highlighted-text-color, #fff)}.select2-container--default .select2-results__option--hide{display:none}.select2-container--default .select2-results__group{display:block;cursor:default;background:var(--select2-option-group-background, transparent);padding:6px;color:var(--select2-option-group-text-color, gray)}.select2-no-result{color:var(--select2-no-result-color, #888);font-style:var(--select2-no-result-font-style, italic)}.select2-too-much-result{color:var(--select2-too-much-result-color, #888);font-style:var(--select2-too-much-font-style, italic)}.select2-grid,.select2-grid ul{display:grid;grid-template-columns:[col-start] repeat(var(--grid-size),1fr) [col-end]}.select2-grid-auto,.select2-grid-auto ul{display:grid;grid-template-columns:[col-start] repeat(auto-fill,minmax(var(--grid-size, 100px),1fr)) [col-end]}.select2-container--default .select2-grid ul,.select2-container--default .select2-grid-auto ul{padding-left:var(--select2-option-padding, 6px)}.select2-container--default .select2-grid ul .select2-results__group,.select2-container--default .select2-grid-auto ul .select2-results__group{padding-left:0}.select2-container--default .select2-grid ul .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option,.select2-container--default .select2-grid ul .select2-results__option .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option .select2-results__option,.select2-container--default .select2-grid ul .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid ul .select2-results__option .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid ul .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{padding-left:var(--select2-option-padding, 6px)}:host.nostyle .select2-dropdown{border-color:transparent}:host.nostyle .select2-selection--single,:host.nostyle .select2-selection--multiple{border-color:transparent;background:transparent}:host.nostyle .select2-container--default .select2-focused .select2-selection--single,:host.nostyle .select2-container--default .select2-focused .select2-selection--multiple,:host.nostyle .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,:host.nostyle .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{border-color:transparent;background:transparent}:host.borderless{--select2-dropdown-above-border-bottom: 1px solid var(--select2-dropdown-border-color, #aaa);--select2-dropdown-above-border-bottom-left-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-above-border-bottom-right-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-below-border-top: 1px solid var(--select2-dropdown-border-color, #aaa);--select2-dropdown-below-border-top-left-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-below-border-top-right-radius: var(--select2-selection-border-radius, 4px)}:host.borderless .select2-selection--single,:host.borderless .select2-selection--multiple{border-color:transparent;background:transparent}:host.borderless .select2-container--default .select2-focused .select2-selection--single,:host.borderless .select2-container--default .select2-focused .select2-selection--multiple,:host.borderless .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,:host.borderless .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{border-color:transparent;background:transparent}:host.select2-selection-nowrap .select2-selection--single.select2-selection,:host.select2-selection-nowrap .select2-selection--single.select2-selection span,:host.select2-selection-nowrap .select2-selection--single.select2-selection ul,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection span,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection ul{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host.select2-selection-nowrap .select2-selection--single.select2-selection ul,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection ul{display:flex;flex-wrap:nowrap}:host.select2-selection-nowrap .select2-selection--single.select2-selection li,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection li{display:flex}:host.material{display:inline-block;width:300px}:host.material>.select2-container{vertical-align:inherit;padding-bottom:1.29688em}:host.material>.select2-container .selection{display:inline-flex;align-items:baseline;border-top:.84375em solid transparent;padding:.4375em 0;width:100%;height:auto}:host.material .select2-container--default .select2-selection--single,:host.material .select2-container--default .select2-selection--multiple{box-sizing:border-box;border:0;border-radius:0;width:100%;height:24px}:host.material .select2-container--default .select2-selection--single:before,:host.material .select2-container--default .select2-selection--multiple:before{display:block;position:absolute;bottom:1.65em;background:var(--select2-material-underline, #ddd);width:100%;height:1px;content:\" \"}:host.material .select2-container--default .select2-selection--single:after,:host.material .select2-container--default .select2-selection--multiple:after{display:block;position:absolute;bottom:1.63em;left:50%;transition:none;background:var(--select2-material-underline-active, #5a419e);width:0%;height:2px;content:\" \"}:host.material .select2-container--default .select2-selection--single .select2-selection__rendered,:host.material .select2-container--default .select2-selection--multiple .select2-selection__rendered{padding-left:1px;line-height:inherit}:host.material .select2-container--default .select2-selection--single .select2-selection__placeholder,:host.material .select2-container--default .select2-selection--multiple .select2-selection__placeholder{display:block;position:absolute;top:20px;left:0;transform-origin:0 21px;transition:transform .3s;color:var(--select2-material-placeholder-color, rgba(0, 0, 0, .38))}:host.material .select2-container--default .select2-container--open{bottom:1.6em;left:0}:host.material .select2-container--default .select2-selection__placeholder__option{transform:translateY(-1.5em) scale(.75) perspective(100px) translateZ(.001px);width:133.33333%}:host.material .select2-container--default .select2-selection__arrow{top:20px}:host.material .select2-container--default.select2-container--open .select2-selection--single:after,:host.material .select2-container--default.select2-container--open .select2-selection--multiple:after,:host.material .select2-container--default .select2-focused .select2-selection--single:after,:host.material .select2-container--default .select2-focused .select2-selection--multiple:after{left:0%;transition:width .3s cubic-bezier(.12,1,.77,1),left .3s cubic-bezier(.12,1,.77,1);width:100%}:host.material .select2-container--default .select2-dropdown{box-shadow:0 5px 5px #00000080;border:0;border-radius:0}:host.material .select2-container--default .select2-results__option[aria-selected=true],:host.material .select2-container--default .select2-results__option--highlighted[aria-selected]{background:var(--select2-material-option-selected-background, rgba(0, 0, 0, .04));color:var(--select2-material-option-highlighted-text-color, #000)}:host.material .select2-container--default .select2-results__option[aria-selected=true]{color:var(--select2-material-option-selected-text-color, #ff5722)}:host.material .select2-container--default.select2-container--disabled .select2-selection--single,:host.material .select2-container--default.select2-container--disabled .select2-selection--multiple,:host.material .select2-container--default.select2-container--readonly .select2-selection--single,:host.material .select2-container--default.select2-container--readonly .select2-selection--multiple{background:transparent}:host.material .select2-container--default.select2-container--disabled .select2-selection--single:before,:host.material .select2-container--default.select2-container--disabled .select2-selection--multiple:before{background:var(--select2-material-underline-disabled, linear-gradient(to right, rgba(0, 0, 0, .26) 0, rgba(0, 0, 0, .26) 33%, transparent 0));background-position:0 bottom;background-size:4px 1px;background-repeat:repeat-x}:host.material .select2-container--default.select2-container--readonly .select2-selection--single:before,:host.material .select2-container--default.select2-container--readonly .select2-selection--multiple:before{background:var(--select2-material-underline-readonly, linear-gradient(to right, rgba(0, 0, 0, .26) 0, rgba(0, 0, 0, .26) 33%, transparent 0));background-position:0 bottom;background-size:4px 1px;background-repeat:repeat-x}:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--single:before,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--single:after,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--multiple:before,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--multiple:after{background:var(--select2-material-underline-invalid, red)}:host.material:not(.select2-container--open) .select2-focused .select2-selection--single,:host.material:not(.select2-container--open) .select2-focused .select2-selection--multiple{border:0}:host.material .select2-subscript-wrapper{position:absolute;top:calc(100% - 1.72917em);color:var(--select2-hint-text-color, #888);font-size:75%}::ng-deep .select2-overlay-backdrop{background:var(--select2-overlay-backdrop, transparent)}::ng-deep .cdk-overlay-container .select2-container .select2-dropdown.select2-dropdown--above{bottom:0}::ng-deep .cdk-overlay-container .select2-container--open.select2-position-auto .select2-dropdown{margin-bottom:28px}::ng-deep .cdk-overlay-container .select2-container--open.select2-position-auto .select2-dropdown.select2-dropdown--above{bottom:0;margin-top:28px;margin-bottom:0}::ng-deep .cdk-overlay-container .select2-style-borderless{--select2-dropdown-above-border-bottom: 1px solid var(--select2-dropdown-border-color, #aaa);--select2-dropdown-above-border-bottom-left-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-above-border-bottom-right-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-below-border-top: 1px solid var(--select2-dropdown-border-color, #aaa);--select2-dropdown-below-border-top-left-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-below-border-top-right-radius: var(--select2-selection-border-radius, 4px)}@supports (-moz-appearance: none){select2.material .select2-container--default .select2-selection--single,select2.material .select2-container--default .select2-selection--multiple{height:26px}}\n"], dependencies: [{ kind: "directive", type: CdkOverlayOrigin, selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]", exportAs: ["cdkOverlayOrigin"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush", "cdkConnectedOverlayDisposeOnNavigation"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { kind: "directive", type: InfiniteScrollDirective, selector: "[infiniteScroll], [infinite-scroll], [data-infinite-scroll]", inputs: ["infiniteScrollDistance", "infiniteScrollUpDistance", "infiniteScrollThrottle", "infiniteScrollDisabled", "infiniteScrollContainer", "scrollWindow", "immediateCheck", "horizontal", "alwaysCallback", "fromRoot"], outputs: ["scrolled", "scrolledUp"] }, { kind: "directive", type: CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep", "cdkDropListElementContainer"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer", "cdkDragScale"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.4", ngImport: i0, type: Select2, decorators: [{
            type: Component,
            args: [{ selector: 'select2, ng-select2', standalone: true, imports: [CdkOverlayOrigin, NgTemplateOutlet, CdkConnectedOverlay, InfiniteScrollDirective, CdkDropList, CdkDrag], host: {
                        '[id]': 'id()',
                        '[class.select2-selection-nowrap]': 'selectionNoWrap()',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, template: "<label class=\"select2-label\" (click)=\"toggleOpenAndClose()\" [id]=\"idLabel()\">\n  <ng-content select=\"select2-label, ng-select2-label\"></ng-content>\n  @if (required()) {\n    <span class=\"select2-required\" aria-hidden=\"true\"></span>\n  }\n</label>\n\n<div\n  class=\"select2 select2-container select2-container--default\"\n  [class.select2-container--focus]=\"focused\"\n  [class.select2-container--below]=\"!select2above\"\n  [class.select2-container--above]=\"select2above\"\n  [class.select2-container--open]=\"isOpen\"\n  [class.select2-container--disabled]=\"disabled()\"\n  [class.select2-container--readonly]=\"readonly()\"\n>\n  <div\n    [id]=\"idCombo()\"\n    role=\"combobox\"\n    class=\"selection\"\n    #selection\n    #trigger=\"cdkOverlayOrigin\"\n    [tabindex]=\"!this.isOpen ? _tabIndex : '-1'\"\n    [attr.aria-labelledby]=\"ariaLabelledby() ?? idLabel()\"\n    [attr.aria-expanded]=\"isOpen\"\n    aria-haspopup=\"listbox\"\n    [attr.aria-controls]=\"idOptions()\"\n    [attr.aria-activedescendant]=\"isOpen ? hoveringOptionId() : null\"\n    [attr.aria-describedby]=\"ariaDescribedby()\"\n    [attr.title]=\"title()\"\n    [attr.aria-invalid]=\"_isErrorState() || ariaInvalid() ? 'true' : null\"\n    [attr.aria-required]=\"required() ? 'true' : null\"\n    [attr.aria-readonly]=\"readonly() ? 'true' : null\"\n    [attr.aria-disabled]=\"disabled() ? 'true' : null\"\n    (click)=\"toggleOpenAndClose()\"\n    (focus)=\"focusin()\"\n    (focusout)=\"focusout($event)\"\n    (keydown)=\"openKey($event)\"\n    cdkOverlayOrigin\n    [class.select2-focused]=\"focused\"\n  >\n    <div\n      class=\"select2-selection\"\n      [class.select2-selection--multiple]=\"multiple()\"\n      [class.select2-selection--single]=\"!multiple()\"\n    >\n      @if (selectionOverride()) {\n        <span class=\"select2-selection__override\" [innerHTML]=\"_selectionOverrideLabel()\"></span>\n\n        @if (\n          resettable() &&\n          !(disabled() || readonly()) &&\n          resetSelectedValue() !== _value &&\n          ((!multiple() && select2Option) || (multiple() && select2Options.length > 0))\n        ) {\n          <ng-container *ngTemplateOutlet=\"resetButton\"></ng-container>\n        }\n      } @else if (!multiple()) {\n        <span\n          class=\"select2-selection__rendered\"\n          [title]=\"select2Option?.label || ''\"\n          [attr.aria-live]=\"nativeKeyboard() && !isOpen ? 'polite' : null\"\n        >\n          @if (!select2Option) {\n            <span>&nbsp;</span>\n          }\n          @if (select2Option) {\n            @if (!hasTemplate(select2Option, 'option', true) || noLabelTemplate()) {\n              <span [innerHTML]=\"select2Option.label\"></span>\n            } @else {\n              <ng-container\n                *ngTemplateOutlet=\"getTemplate(select2Option, 'option', true); context: select2Option\"\n              ></ng-container>\n            }\n          }\n          <span\n            [class.select2-selection__placeholder__option]=\"selectedOption\"\n            class=\"select2-selection__placeholder\"\n            >{{ placeholder() }}</span\n          >\n        </span>\n\n        @if (resettable() && resetSelectedValue() !== _value && select2Option && !(disabled() || readonly())) {\n          <ng-container *ngTemplateOutlet=\"resetButton\"></ng-container>\n        }\n        <span class=\"select2-selection__arrow\" role=\"presentation\"> </span>\n      } @else {\n        <ul\n          class=\"select2-selection__rendered\"\n          cdkDropList\n          cdkDropListOrientation=\"mixed\"\n          [cdkDropListDisabled]=\"!multipleDrag()\"\n          (cdkDropListDropped)=\"drop($event)\"\n        >\n          @if (!autoCreate()) {\n            <span\n              [class.select2-selection__placeholder__option]=\"select2Options.length > 0\"\n              class=\"select2-selection__placeholder\"\n              >{{ placeholder() }}</span\n            >\n          }\n          @for (op of selectedOption || []; track op.id) {\n            <li\n              class=\"select2-selection__choice\"\n              [title]=\"op.label\"\n              tabindex=\"0\"\n              (focus)=\"_updateFocusState(true)\"\n              (keydown.enter)=\"removeSelection($event, op)\"\n              cdkDrag\n            >\n              @if (!(disabled() || readonly())) {\n                <span\n                  (click)=\"removeSelection($event, op)\"\n                  class=\"select2-selection__choice__remove\"\n                  role=\"presentation\"\n                  aria-hidden=\"true\"\n                  >\u00D7</span\n                >\n              }\n              @if (!hasTemplate(op, 'option', true) || noLabelTemplate()) {\n                <span [innerHTML]=\"op.label\"></span>\n              } @else {\n                <ng-container *ngTemplateOutlet=\"getTemplate(op, 'option', true); context: op\"></ng-container>\n              }\n            </li>\n          }\n          @if (autoCreate()) {\n            <li class=\"select2-selection__auto-create\" (focus)=\"stopEvent($event)\" (blur)=\"stopEvent($event)\">\n              <input\n                [id]=\"id() + '-create-field'\"\n                (click)=\"toggleOpenAndClose(false, true); stopEvent($event)\"\n                (keydown)=\"keyDown($event, true)\"\n                (keyup)=\"searchUpdate($event)\"\n                (change)=\"prevChange($event)\"\n                class=\"select2-create__field\"\n                type=\"search\"\n                role=\"textbox\"\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                autocapitalize=\"off\"\n                spellcheck=\"false\"\n              />\n            </li>\n          }\n        </ul>\n        @if (resettable() && $any(selectedOption)?.length > 0 && !(disabled() || readonly())) {\n          <ng-container *ngTemplateOutlet=\"resetButton\"></ng-container>\n        }\n      }\n    </div>\n  </div>\n  @if (!overlay()) {\n    <ng-container *ngTemplateOutlet=\"containerTemplate\"></ng-container>\n  }\n\n  <div class=\"select2-subscript-wrapper\">\n    <ng-content select=\"select2-hint, ng-select2-hint\"></ng-content>\n  </div>\n</div>\n\n<ng-template\n  cdkConnectedOverlay\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"select2-overlay-backdrop\"\n  [cdkConnectedOverlayOrigin]=\"trigger\"\n  [cdkConnectedOverlayOpen]=\"this.isOpen && overlay()\"\n  [cdkConnectedOverlayMinWidth]=\"overlayWidth\"\n  [cdkConnectedOverlayHeight]=\"overlayHeight\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  (backdropClick)=\"toggleOpenAndClose()\"\n>\n  <ng-container *ngTemplateOutlet=\"containerTemplate\"></ng-container>\n</ng-template>\n\n<ng-template #containerTemplate>\n  <div\n    [id]=\"idOverlay()\"\n    class=\"select2-container select2-container--default select2-container-dropdown\"\n    [class.select2-container--open]=\"isOpen\"\n    [class.select2-overlay]=\"overlay()\"\n    [class.select2-position-auto]=\"listPosition() === 'auto'\"\n    [class.select2-style-borderless]=\"styleMode() === 'borderless'\"\n  >\n    <div\n      #dropdown\n      class=\"select2-dropdown\"\n      [class.select2-dropdown--below]=\"!select2above\"\n      [class.select2-dropdown--above]=\"select2above\"\n    >\n      <div class=\"select2-search select2-search--dropdown\" [class.select2-search--hide]=\"isSearchboxHidden\">\n        <input\n          #searchInput\n          [id]=\"id() + '-search-field'\"\n          [value]=\"searchText\"\n          (keydown)=\"keyDown($event, autoCreate())\"\n          (keyup)=\"searchUpdate($event)\"\n          (change)=\"prevChange($event)\"\n          class=\"select2-search__field\"\n          type=\"search\"\n          role=\"combobox\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          autocapitalize=\"off\"\n          spellcheck=\"false\"\n          [attr.tabindex]=\"this.isOpen ? _tabIndex : '-1'\"\n          [attr.aria-labelledby]=\"ariaLabelledby() ?? idLabel()\"\n          aria-autocomplete=\"list\"\n          [attr.aria-controls]=\"idOptions()\"\n          aria-expanded=\"true\"\n          [attr.aria-activedescendant]=\"hoveringOptionId()\"\n        />\n      </div>\n\n      <div class=\"select2-results\">\n        <ul\n          [id]=\"idOptions()\"\n          #results\n          class=\"select2-results__options\"\n          [class.select2-grid]=\"grid() && isNumber(grid())\"\n          [class.select2-grid-auto]=\"grid() && !isNumber(grid())\"\n          [style.max-height]=\"resultMaxHeight()\"\n          [style.--grid-size]=\"grid() || null\"\n          role=\"listbox\"\n          tabindex=\"-1\"\n          infiniteScroll\n          [infiniteScrollDisabled]=\"!infiniteScroll() && !isOpen\"\n          [infiniteScrollDistance]=\"infiniteScrollDistance()\"\n          [infiniteScrollThrottle]=\"infiniteScrollThrottle()\"\n          [infiniteScrollContainer]=\"results\"\n          [attr.aria-labelledby]=\"ariaLabelledby() ?? idLabel()\"\n          [attr.aria-multiselectable]=\"multiple()\"\n          [attr.aria-activedescendant]=\"hoveringOptionId()\"\n          (scrolled)=\"onScroll('down')\"\n          (scrolledUp)=\"onScroll('up')\"\n          (keydown)=\"keyDown($event)\"\n        >\n          @if (showSelectAll() && multiple()) {\n            <li class=\"select2-results__option select2-selectall\" (click)=\"selectAll()\" tabindex=\"1\" aria-selected>\n              <div class=\"select2-label-content\">\n                {{ selectAllTest() ? removeAllText() : selectAllText() }}\n              </div>\n            </li>\n          }\n\n          @for (groupOrOption of filteredData(); track groupOrOption.id; let i = $index) {\n            @let group = _toGroup(groupOrOption);\n            @if (group.options !== undefined) {\n              <li class=\"select2-results__option select2-results__group\">\n                <span [id]=\"getElementId(groupOrOption)\">\n                  @if (!hasTemplate(group, 'group')) {\n                    <strong\n                      [attr.class]=\"'select2-results__group' + (group.classes ? ' ' + group.classes : '')\"\n                      [innerHTML]=\"group.label\"\n                    ></strong>\n                  } @else {\n                    <ng-container *ngTemplateOutlet=\"getTemplate(group, 'group'); context: group\"> </ng-container>\n                  }\n                </span>\n                <ul\n                  class=\"select2-results__options select2-results__options--nested\"\n                  role=\"group\"\n                  [attr.aria-labelledby]=\"getElementId(groupOrOption)\"\n                >\n                  @for (option of group.options; track option.id; let j = $index) {\n                    <li\n                      #result\n                      [id]=\"getElementId(option)\"\n                      [class]=\"getOptionStyle(option)\"\n                      role=\"option\"\n                      [attr.aria-selected]=\"isSelected(option)\"\n                      [attr.aria-disabled]=\"isDisabled(option)\"\n                      (mouseenter)=\"mouseenter(option)\"\n                      (click)=\"click(option)\"\n                    >\n                      @if (!hasTemplate(option, 'option')) {\n                        <div class=\"select2-label-content\" [innerHTML]=\"option.label\"></div>\n                      } @else {\n                        <ng-container *ngTemplateOutlet=\"getTemplate(option, 'option'); context: option\">\n                        </ng-container>\n                      }\n                    </li>\n                  }\n                </ul>\n              </li>\n            } @else {\n              @let option = _toOption(groupOrOption);\n              <li\n                #result\n                [id]=\"getElementId(groupOrOption)\"\n                [class]=\"getOptionStyle(option)\"\n                role=\"option\"\n                [attr.aria-selected]=\"isSelected(option)\"\n                [attr.aria-disabled]=\"isDisabled(option)\"\n                (mouseenter)=\"mouseenter(option)\"\n                (click)=\"click(option)\"\n              >\n                @if (!hasTemplate(option, 'option')) {\n                  <div [innerHTML]=\"option.label\" class=\"select2-label-content\"></div>\n                } @else {\n                  <ng-container *ngTemplateOutlet=\"getTemplate(option, 'option'); context: option\"> </ng-container>\n                }\n              </li>\n\n              <ng-template #li>\n                <ng-container *ngTemplateOutlet=\"getTemplate(option, 'option'); context: option\"> </ng-container>\n              </ng-template>\n            }\n          }\n          @if (!filteredData()?.length && noResultMessage()) {\n            <li class=\"select2-no-result select2-results__option\" [innerHTML]=\"noResultMessage()\"></li>\n          }\n          @if (maxResultsExceeded) {\n            <li class=\"select2-too-much-result select2-results__option\" [innerHTML]=\"maxResultsMessage()\"></li>\n          }\n        </ul>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #resetButton>\n  <button\n    type=\"button\"\n    (focus)=\"_updateFocusState(true)\"\n    (click)=\"reset($event)\"\n    (keydown)=\"$event.stopPropagation()\"\n    class=\"select2-selection__reset\"\n    [attr.aria-description]=\"ariaResetButtonDescription()\"\n    [attr.aria-controls]=\"idCombo()\"\n  >\n    <span aria-hidden=\"true\">\u00D7</span>\n  </button>\n</ng-template>\n", styles: [".select2-label{color:var(--select2-label-text-color, #000)}.select2-container{display:inline-block;position:relative;vertical-align:middle;box-sizing:border-box;margin:0;width:100%}.select2-container .select2-container-dropdown{position:absolute;opacity:0;width:0px}.select2-container .select2-selection--single{display:block;cursor:pointer;box-sizing:border-box;height:var(--select2-single-height, 28px);-webkit-user-select:none;user-select:none}.select2-container .select2-selection--single .select2-selection__rendered{display:block;flex:1 1 auto;padding:var(--select2-selection-padding, 0 0 0 8px);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-selection--single .select2-selection__clear{position:relative}.select2-container .select2-selection--multiple{display:block;cursor:pointer;box-sizing:border-box;min-height:var(--select2-multiple-height, 28px);-webkit-user-select:none;user-select:none}.select2-container .select2-selection--multiple .select2-selection__rendered{display:inline-flex;flex-wrap:wrap;gap:var(--select2-selection-multiple-gap, 2px 5px);padding-bottom:2px;padding-left:8px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-selection--multiple .select2-selection__rendered .select2-selection__auto-create{display:flex;flex:1 1 150px;min-width:150px}.select2-container .select2-selection--multiple .select2-selection__rendered .select2-create__field{border:0;width:100%}.select2-container .select2-selection--multiple .select2-selection__rendered .select2-create__field:focus{outline:0;border:0}.select2-container .select2-search--inline{float:left}.select2-container .select2-search--inline .select2-search__field{box-sizing:border-box;margin-top:5px;border:none;padding:0;font-size:100%}.select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-dropdown{display:block;position:absolute;z-index:1051;box-sizing:border-box;border:1px solid var(--select2-dropdown-border-color, #aaa);border-radius:var(--select2-selection-border-radius, 4px);background:var(--select2-dropdown-background, white);width:100%;height:0;overflow:hidden}.select2-dropdown .select2-label-content{display:contents}.select2-results{display:block}.select2-results__options{margin:0;padding:0;list-style:none}.select2-results__option{padding:var(--select2-option-padding, 6px);color:var(--select2-option-text-color, #000);-webkit-user-select:none;user-select:none}.select2-results__option[aria-selected]{cursor:pointer}.select2-container.select2-container-dropdown.select2-container--open{opacity:1;width:100%}.select2-container--open .select2-dropdown{height:auto;overflow:auto}.select2-container--open .select2-dropdown--above{display:flex;bottom:27px;flex-direction:column-reverse;border-bottom:var(--select2-dropdown-above-border-bottom, none);border-bottom-right-radius:var(--select2-dropdown-above-border-bottom-right-radius, 0);border-bottom-left-radius:var(--select2-dropdown-above-border-bottom-left-radius, 0)}.select2-container--open .select2-dropdown--below{border-top:var(--select2-dropdown-below-border-top, none);border-top-right-radius:var(--select2-dropdown-below-border-top-right-radius, 0);border-top-left-radius:var(--select2-dropdown-below-border-top-left-radius, 0)}.select2-search--dropdown{display:block;padding:4px}.select2-search--dropdown .select2-search__field{box-sizing:border-box;padding:4px;width:100%}.select2-search--dropdown .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-search--dropdown.select2-search--hide{display:none}.select2-close-mask{display:block;position:fixed;top:0;left:0;opacity:0;z-index:99;margin:0;border:0;padding:0;width:auto;min-width:100%;height:auto;min-height:100%}.select2-required:before{content:\"*\";color:var(--select2-required-color, red)}.select2-hidden-accessible{border:0!important;clip:rect(0 0 0 0)!important;position:absolute!important;margin:-1px!important;padding:0!important;width:1px!important;height:1px!important;overflow:hidden!important}.select2-container--default .select2-selection--single{display:flex;border:1px solid var(--select2-selection-border-color, #aaa);border-radius:var(--select2-selection-border-radius, 4px);background:var(--select2-selection-background, #fff)}.select2-container--default .select2-selection--single .select2-selection__rendered{color:var(--select2-selection-text-color, #111);line-height:var(--select2-selection-line-height, 28px)}.select2-container--default .select2-selection--single .select2-selection__clear{float:right;cursor:pointer;font-weight:700}.select2-container--default .select2-selection--single .select2-selection__placeholder{color:var(--select2-placeholder-color, #999)}.select2-container--default .select2-selection--single .select2-selection__placeholder span{overflow:hidden;text-overflow:var(--select2-placeholder-overflow, ellipsis);white-space:nowrap}.select2-container--default .select2-selection--single .select2-selection__placeholder__option{display:none}.select2-container--default .select2-selection--single .select2-selection__override{flex:1;margin:0 5px}.select2-container--default .select2-selection--single .select2-selection__reset,.select2-container--default .select2-selection--single .select2-selection__arrow{display:flex;justify-content:center;align-items:center;width:20px}.select2-container--default .select2-selection--single .select2-selection__arrow:before{border-width:5px 4px 0;border-style:solid;border-color:var(--select2-arrow-color, #888) transparent;width:0;height:0;content:\" \"}.select2-container--default .select2-selection__reset{align-self:center;border:var(--select2-reset-border, none);border-radius:var(--select2-reset-border-radius, 4px);background:var(--select2-reset-background, transparent);height:fit-content;color:var(--select2-reset-color, #999)}.select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear,.select2-container--default.select2-container--disabled .select2-selection__choice__remove,.select2-container--default.select2-container--readonly .select2-selection--single .select2-selection__clear,.select2-container--default.select2-container--readonly .select2-selection__choice__remove{display:none}.select2-container--default.select2-container--disabled .select2-selection--single,.select2-container--default.select2-container--disabled .select2-selection--multiple{cursor:default;background:var(--select2-selection-disabled-background, #eee)}.select2-container--default.select2-container--readonly .select2-selection--single,.select2-container--default.select2-container--readonly .select2-selection--multiple{background:var(--select2-selection-readonly-background, #eee)}.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow:before{border-width:0 4px 5px;border-color:transparent transparent var(--select2-arrow-color, #888)}.select2-container--default .select2-selection--multiple{display:flex;cursor:text;border:1px solid var(--select2-selection-border-color, #aaa);border-radius:var(--select2-selection-border-radius, 4px);background:var(--select2-selection-background, #fff)}.select2-container--default .select2-selection--multiple .select2-selection__rendered{flex:1 1 auto;align-items:center;box-sizing:border-box;margin:0;padding:var(--select2-selection-multiple-padding, 2px 5px);width:100%;min-height:1em;list-style:none}.select2-container--default .select2-selection--multiple .select2-selection__rendered li{line-height:var(--select2-selection-choice-line-height, 20px);list-style:none}.select2-container--default .select2-selection--multiple .select2-selection__placeholder{display:block;float:left;margin:-3px 0;width:100%;overflow:hidden;color:var(--select2-placeholder-color, #999);text-overflow:var(--select2-placeholder-overflow, ellipsis);white-space:nowrap}.select2-container--default .select2-selection--multiple .select2-selection__placeholder__option{display:none}.select2-container--default .select2-selection--multiple .select2-selection__override{flex:1;margin:0 5px}.select2-container--default .select2-selection--multiple .select2-selection__clear{float:right;cursor:pointer;margin-top:5px;margin-right:10px;font-weight:700}.select2-container--default .select2-selection--multiple .select2-selection__choice{cursor:default;border:1px solid var(--select2-selection-choice-border-color, #aaa);border-radius:var(--select2-selection-border-radius, 4px);background:var(--select2-selection-choice-background, #e4e4e4);padding:0 5px;color:var(--select2-selection-choice-text-color, #000)}.select2-container--default .select2-selection--multiple .select2-selection__choice.cdk-drag:not(.cdk-drag-disabled){cursor:move}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove{display:inline-block;cursor:pointer;margin-right:2px;color:var(--select2-selection-choice-close-color, #999);font-weight:700}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover{color:var(--select2-selection-choice-hover-close-color, #333)}.select2-container--default.select2-container--focused .select2-selection--multiple{outline:none;border:solid var(--select2-selection-focus-border-color, #000) 1px}.select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,.select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{outline:none;border:solid var(--select2-selection-focus-border-color, #000) 1px}.select2-container--default.select2-container--open.select2-container--above .select2-selection--single,.select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple{border-top-right-radius:0;border-top-left-radius:0}.select2-container--default.select2-container--open.select2-container--below .select2-selection--single,.select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom-right-radius:0;border-bottom-left-radius:0}.select2-container--default .select2-search--dropdown .select2-search__field{border:1px solid var(--select2-search-border-color, #aaa);border-radius:var(--select2-search-border-radius, 0px);background:1px solid var(--select2-search-background, #fff)}.select2-container--default .select2-search--inline .select2-search__field{-webkit-appearance:textfield;outline:none;box-shadow:none;border:none;background:transparent}.select2-container--default .select2-results>.select2-results__options{overflow-y:auto}.select2-container--default .select2-results__option.select2-results__group{grid-column:col-start/col-end;padding:0}.select2-container--default .select2-results__option[aria-disabled=true]{background:var(--select2-option-disabled-background, transparent);color:var(--select2-option-disabled-text-color, #999)}.select2-container--default .select2-results__option[aria-selected=true]{background:var(--select2-option-selected-background, #ddd);color:var(--select2-option-selected-text-color, #000)}.select2-container--default .select2-results__option .select2-results__option{padding-left:1em}.select2-container--default .select2-results__option .select2-results__option .select2-results__group{padding-left:0}.select2-container--default .select2-results__option .select2-results__option .select2-results__option{margin-left:-1em;padding-left:2em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-2em;padding-left:3em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-3em;padding-left:4em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-4em;padding-left:5em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-5em;padding-left:6em}.select2-container--default .select2-results__option--highlighted[aria-selected]{background:var(--select2-option-highlighted-background, #5897fb);color:var(--select2-option-highlighted-text-color, #fff)}.select2-container--default .select2-results__option--hide{display:none}.select2-container--default .select2-results__group{display:block;cursor:default;background:var(--select2-option-group-background, transparent);padding:6px;color:var(--select2-option-group-text-color, gray)}.select2-no-result{color:var(--select2-no-result-color, #888);font-style:var(--select2-no-result-font-style, italic)}.select2-too-much-result{color:var(--select2-too-much-result-color, #888);font-style:var(--select2-too-much-font-style, italic)}.select2-grid,.select2-grid ul{display:grid;grid-template-columns:[col-start] repeat(var(--grid-size),1fr) [col-end]}.select2-grid-auto,.select2-grid-auto ul{display:grid;grid-template-columns:[col-start] repeat(auto-fill,minmax(var(--grid-size, 100px),1fr)) [col-end]}.select2-container--default .select2-grid ul,.select2-container--default .select2-grid-auto ul{padding-left:var(--select2-option-padding, 6px)}.select2-container--default .select2-grid ul .select2-results__group,.select2-container--default .select2-grid-auto ul .select2-results__group{padding-left:0}.select2-container--default .select2-grid ul .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option,.select2-container--default .select2-grid ul .select2-results__option .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option .select2-results__option,.select2-container--default .select2-grid ul .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid ul .select2-results__option .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid ul .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option,.select2-container--default .select2-grid-auto ul .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{padding-left:var(--select2-option-padding, 6px)}:host.nostyle .select2-dropdown{border-color:transparent}:host.nostyle .select2-selection--single,:host.nostyle .select2-selection--multiple{border-color:transparent;background:transparent}:host.nostyle .select2-container--default .select2-focused .select2-selection--single,:host.nostyle .select2-container--default .select2-focused .select2-selection--multiple,:host.nostyle .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,:host.nostyle .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{border-color:transparent;background:transparent}:host.borderless{--select2-dropdown-above-border-bottom: 1px solid var(--select2-dropdown-border-color, #aaa);--select2-dropdown-above-border-bottom-left-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-above-border-bottom-right-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-below-border-top: 1px solid var(--select2-dropdown-border-color, #aaa);--select2-dropdown-below-border-top-left-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-below-border-top-right-radius: var(--select2-selection-border-radius, 4px)}:host.borderless .select2-selection--single,:host.borderless .select2-selection--multiple{border-color:transparent;background:transparent}:host.borderless .select2-container--default .select2-focused .select2-selection--single,:host.borderless .select2-container--default .select2-focused .select2-selection--multiple,:host.borderless .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,:host.borderless .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{border-color:transparent;background:transparent}:host.select2-selection-nowrap .select2-selection--single.select2-selection,:host.select2-selection-nowrap .select2-selection--single.select2-selection span,:host.select2-selection-nowrap .select2-selection--single.select2-selection ul,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection span,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection ul{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host.select2-selection-nowrap .select2-selection--single.select2-selection ul,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection ul{display:flex;flex-wrap:nowrap}:host.select2-selection-nowrap .select2-selection--single.select2-selection li,:host.select2-selection-nowrap .select2-selection--multiple.select2-selection li{display:flex}:host.material{display:inline-block;width:300px}:host.material>.select2-container{vertical-align:inherit;padding-bottom:1.29688em}:host.material>.select2-container .selection{display:inline-flex;align-items:baseline;border-top:.84375em solid transparent;padding:.4375em 0;width:100%;height:auto}:host.material .select2-container--default .select2-selection--single,:host.material .select2-container--default .select2-selection--multiple{box-sizing:border-box;border:0;border-radius:0;width:100%;height:24px}:host.material .select2-container--default .select2-selection--single:before,:host.material .select2-container--default .select2-selection--multiple:before{display:block;position:absolute;bottom:1.65em;background:var(--select2-material-underline, #ddd);width:100%;height:1px;content:\" \"}:host.material .select2-container--default .select2-selection--single:after,:host.material .select2-container--default .select2-selection--multiple:after{display:block;position:absolute;bottom:1.63em;left:50%;transition:none;background:var(--select2-material-underline-active, #5a419e);width:0%;height:2px;content:\" \"}:host.material .select2-container--default .select2-selection--single .select2-selection__rendered,:host.material .select2-container--default .select2-selection--multiple .select2-selection__rendered{padding-left:1px;line-height:inherit}:host.material .select2-container--default .select2-selection--single .select2-selection__placeholder,:host.material .select2-container--default .select2-selection--multiple .select2-selection__placeholder{display:block;position:absolute;top:20px;left:0;transform-origin:0 21px;transition:transform .3s;color:var(--select2-material-placeholder-color, rgba(0, 0, 0, .38))}:host.material .select2-container--default .select2-container--open{bottom:1.6em;left:0}:host.material .select2-container--default .select2-selection__placeholder__option{transform:translateY(-1.5em) scale(.75) perspective(100px) translateZ(.001px);width:133.33333%}:host.material .select2-container--default .select2-selection__arrow{top:20px}:host.material .select2-container--default.select2-container--open .select2-selection--single:after,:host.material .select2-container--default.select2-container--open .select2-selection--multiple:after,:host.material .select2-container--default .select2-focused .select2-selection--single:after,:host.material .select2-container--default .select2-focused .select2-selection--multiple:after{left:0%;transition:width .3s cubic-bezier(.12,1,.77,1),left .3s cubic-bezier(.12,1,.77,1);width:100%}:host.material .select2-container--default .select2-dropdown{box-shadow:0 5px 5px #00000080;border:0;border-radius:0}:host.material .select2-container--default .select2-results__option[aria-selected=true],:host.material .select2-container--default .select2-results__option--highlighted[aria-selected]{background:var(--select2-material-option-selected-background, rgba(0, 0, 0, .04));color:var(--select2-material-option-highlighted-text-color, #000)}:host.material .select2-container--default .select2-results__option[aria-selected=true]{color:var(--select2-material-option-selected-text-color, #ff5722)}:host.material .select2-container--default.select2-container--disabled .select2-selection--single,:host.material .select2-container--default.select2-container--disabled .select2-selection--multiple,:host.material .select2-container--default.select2-container--readonly .select2-selection--single,:host.material .select2-container--default.select2-container--readonly .select2-selection--multiple{background:transparent}:host.material .select2-container--default.select2-container--disabled .select2-selection--single:before,:host.material .select2-container--default.select2-container--disabled .select2-selection--multiple:before{background:var(--select2-material-underline-disabled, linear-gradient(to right, rgba(0, 0, 0, .26) 0, rgba(0, 0, 0, .26) 33%, transparent 0));background-position:0 bottom;background-size:4px 1px;background-repeat:repeat-x}:host.material .select2-container--default.select2-container--readonly .select2-selection--single:before,:host.material .select2-container--default.select2-container--readonly .select2-selection--multiple:before{background:var(--select2-material-underline-readonly, linear-gradient(to right, rgba(0, 0, 0, .26) 0, rgba(0, 0, 0, .26) 33%, transparent 0));background-position:0 bottom;background-size:4px 1px;background-repeat:repeat-x}:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--single:before,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--single:after,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--multiple:before,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--multiple:after{background:var(--select2-material-underline-invalid, red)}:host.material:not(.select2-container--open) .select2-focused .select2-selection--single,:host.material:not(.select2-container--open) .select2-focused .select2-selection--multiple{border:0}:host.material .select2-subscript-wrapper{position:absolute;top:calc(100% - 1.72917em);color:var(--select2-hint-text-color, #888);font-size:75%}::ng-deep .select2-overlay-backdrop{background:var(--select2-overlay-backdrop, transparent)}::ng-deep .cdk-overlay-container .select2-container .select2-dropdown.select2-dropdown--above{bottom:0}::ng-deep .cdk-overlay-container .select2-container--open.select2-position-auto .select2-dropdown{margin-bottom:28px}::ng-deep .cdk-overlay-container .select2-container--open.select2-position-auto .select2-dropdown.select2-dropdown--above{bottom:0;margin-top:28px;margin-bottom:0}::ng-deep .cdk-overlay-container .select2-style-borderless{--select2-dropdown-above-border-bottom: 1px solid var(--select2-dropdown-border-color, #aaa);--select2-dropdown-above-border-bottom-left-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-above-border-bottom-right-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-below-border-top: 1px solid var(--select2-dropdown-border-color, #aaa);--select2-dropdown-below-border-top-left-radius: var(--select2-selection-border-radius, 4px);--select2-dropdown-below-border-top-right-radius: var(--select2-selection-border-radius, 4px)}@supports (-moz-appearance: none){select2.material .select2-container--default .select2-selection--single,select2.material .select2-container--default .select2-selection--multiple{height:26px}}\n"] }]
        }], ctorParameters: () => [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i2.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i2.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i2.NgControl, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { classMaterial: [{
                type: HostBinding,
                args: ['class.material']
            }], classNostyle: [{
                type: HostBinding,
                args: ['class.nostyle']
            }], classBorderless: [{
                type: HostBinding,
                args: ['class.borderless']
            }], select2above: [{
                type: HostBinding,
                args: ['class.select2-above']
            }], clickDetection: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }] } });

/*
 * Public API Surface of ng-select2-component
 */

/**
 * Generated bundle index. Do not edit.
 */

export { Select2, Select2Hint, Select2Label, Select2Utils, defaultMinCountForSearch, protectRegexp, timeout, unicodePatterns };
//# sourceMappingURL=ng-select2-component.mjs.map
